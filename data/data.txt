DEX UI is a handcrafted interface programmed in openFrameworks, running fullscreen underneath a functioning terminal, giving the experience of having a sci fi computer. More.
The project's source code is hosted here for reference. Included are the openFrameworks project source files and shaders, as well as the changes I made to BSPWM (more below). Not included are things like fonts and images.
Note: Dex UI was designed as an experiment or an art piece, not distributable software, so as a result, the code (though I've cleaned it up some) is not the easiest to sort through. Also, because it is no longer in development, I won't be trying to make this work on other people machines - that part's up to you.
What's Happening in the Video Demo
Real desktops revolve around windows, but most sci fi interfaces have these integrated desktops with all sort of animations and no apparent windows. Dex UI aimed to create the illusion of a desktop environment without windows while in reality still operating with windows (in X Windowing System).
To do this, the interface is a single openFrameworks program that handles all the animations. By modifying BSPWM I added a window mode to allow the interface to sit fullscreen beneath any other window. After the introduction animation occurs, a terminal (URXVT) is created above the interface and its size is constrained to the outline drawn in the interface. In short it is two layered windows, but because the windows have no borders or shadows, visually this looks like one integrated interface.
How do I run Dex UI
The code here is for an openFrameworks project. The first step is to get openFrameworks, and get the graphics examples running to confirm it's really working. Then you can start a new project and add the files. Beyond that, fonts and images are not included here, which may be problematic as all of the type work is hard coded.
How I contribute?
This project is here for reference and not in active development, so it is very unlikely I will continue to make changes, or respond to requests to make changes.
Why openFrameworks?
I needed something capable of creating lots of dynamic animations. This could be Processing, pure OpenGL, openFrameworks, etc. Originally my prototypes were in Processing, but for performance reasons I switched to openFrameworks. From what I've learned, many movie interfaces are put together in AfterEffects, so if you wanted to create an interface that did not respond to input, this is also an option.
BSPWM?
BSPWM was what I was working with, but it took some effort to make a window persistently stay fullscreen. The choice of window manager isn't a huge deal, just find something to make the illusion work.
I've also included a .diff file with the changes (to BSPWM commit c49bc92) I made to BSPWM to add what I (for no reason) named power mode. A window can be set to power mode making it stay fullscreen, beneath all other windows across multiple desktops. I've been told a similar effect can be achieved with wmutils, and this might be an easier route.
Font?
Inside the terminal we have Fira Mono, and the rest is United Sans Medium.
Is this working with real data
The keyboard contains some code to work using /dev/input, but the rest still needs to be hooked up to system data. Luckily this is straightforward and only requires replacing the generated data with sampled data.
Why the onscreen Keyboard, does it work with touch screens?
It's there because I think it looks cool. While it doesn't work with touch screens, it might be possible by making the project respond to mouse/touch input.
FlashDB is an ultra-lightweight embedded database that focuses on providing data storage solutions for embedded products. Different from traditional database based on file system, FlashDB combines the features of Flash and has strong performance and reliability. And under the premise of ensuring extremely low resource occupation, the service life of Flash should be extended as much as possible.
Nowadays, there are more and more types of IoT products, and the types and total amount of data generated during operation are also increasing. FlashDB provides a variety of data storage solutions, not only has a small resource footprint, but also has a large storage capacity, which is very suitable for IoT products. The following are the main application scenarios
BLDC motors are entering the hobby community more and more and many great projects have already emerged leveraging their far superior dynamics and power capabilities. BLDC motors have numerous advantages over regular DC motors but they have one big disadvantage, the complexity of control. Even though it has become relatively easy to design and manufacture PCBs and create our own hardware solutions for driving BLDC motors the proper low-cost solutions are yet to come. One of the reasons for this is the apparent complexity of writing the BLDC driving algorithms, Field oriented control (FOC) being an example of one of the most efficient ones. The solutions that can be found on-line are almost exclusively very specific for certain hardware configuration and the microcontroller architecture used. Additionally, most of the efforts at this moment are still channeled towards the high-power applications of the BLDC motors and proper low-cost and low-power FOC supporting boards are very hard to find today and even may not exist.
Please do not hesitate to leave an issue if you have problems/advices/suggestions regarding the code!
Pull requests are welcome, but let's first discuss them in community forum!
If you'd like to contribute to this project but you are not very familiar with github, don't worry, let us know either by posting at the community forum , by posting a github issue or at our discord server.
If you are familiar, we accept pull requests to the dev branch!
For all the questions regarding the potential implementation, applications, supported hardware and similar please visit our community forum or our discord server.
It is always helpful to hear the stories/problems/suggestions of people implementing the code and you might find a lot of answered questions there already!
We are very happy that SimpleFOClibrary has been used as a component of several research project and has made its way to several scientific papers. We are hoping that this trend is going to continue as the project matures and becomes more robust! A short resume paper about SimpleFOC has been published in the Journal of Open Source Software:
SimpleFOC: A Field Oriented Control (FOC) Library for Controlling Brushless Direct Current (BLDC) and Stepper Motors.
A. Skuric, HS. Bank, R. Unger, O. Williams, D. González-Reyes
Journal of Open Source Software, 7(74), 4232, https://doi.org/10.21105/joss.04232
If you are interested in citing SimpleFOClibrary or some other component of SimpleFOCproject in your research, we suggest you to cite our paper
These are the GNU core utilities.  This package is the union of
the GNU fileutils, sh-utils, and textutils packages.
Most of these programs have significant advantages over their Unix
counterparts, such as greater speed, additional options, and fewer
arbitrary limits.

The programs that can be built with this package are:

  [ arch b2sum base32 base64 basename basenc cat chcon chgrp chmod chown
  chroot cksum comm coreutils cp csplit cut date dd df dir dircolors dirname
  du echo env expand expr factor false fmt fold groups head hostid hostname
  id install join kill link ln logname ls md5sum mkdir mkfifo mknod mktemp
  mv nice nl nohup nproc numfmt od paste pathchk pinky pr printenv printf ptx
  pwd readlink realpath rm rmdir runcon seq sha1sum sha224sum sha256sum
  sha384sum sha512sum shred shuf sleep sort split stat stdbuf stty sum sync
  tac tail tee test timeout touch tr true truncate tsort tty uname unexpand
  uniq unlink uptime users vdir wc who whoami yes

See the file NEWS for a list of major changes in the current release.

If you obtained this file as part of a "git clone", then see the
README-hacking file.  If this file came to you as part of a tar archive,
then see the file INSTALL for general compilation and installation
instructions, or README-install for system and coreutils specific instructions.

Like the rest of the GNU system, these programs mostly conform to
POSIX, with BSD and other extensions.  For closer conformance, or
conformance to a particular POSIX version, set the POSIXLY_CORRECT
and the _POSIX2_VERSION environment variables, as described in
the documentation under "Standards conformance".

The ls, dir, and vdir commands are all separate executables instead of
one program that checks argv[0] because people often rename these
programs to things like gls, gnuls, l, etc.  Renaming a program
file shouldn't affect how it operates, so that people can get the
behavior they want with whatever name they want.

Special thanks to Paul Eggert, Brian Matthews, Bruce Evans, Karl Berry,
Kaveh Ghazi, and François Pinard for help with debugging and porting
these programs.  Many thanks to all of the people who have taken the
time to submit problem reports and fixes.  All contributed changes are
attributed in the commit logs.

And thanks to the following people who have provided accounts for
portability testing on many different types of systems: Bob Proulx,
Christian Robert, François Pinard, Greg McGary, Harlan Stenn,
Joel N. Weber, Mark D. Roth, Matt Schalit, Nelson H. F. Beebe,
Réjean Payette, Sam Tardieu.

Thanks to Michael Stone for inflicting test releases of this package
on Debian's unstable distribution, and to all the kind folks who used
that distribution and found and reported bugs.

Note that each man page is now automatically generated from a template
and from the corresponding --help usage message.  Patches to the template
files (man/*.x) are welcome.  However, the authoritative documentation
is in texinfo form in the doc directory.


***************
Feature requests:
---------------

If you would like to add a new feature, please try to get some sort of
consensus that it is a worthwhile change.  One way to do that is to send
mail to coreutils@gnu.org including as much description and justification
as you can.  Based on the feedback that generates, you may be able to
convince us that it's worth adding.  Please also consult the list of
previously discussed but ultimately rejected feature requests at:
https://www.gnu.org/software/coreutils/rejected_requests.html


***************
Reporting bugs:
---------------

Send bug reports, questions, comments, etc. to bug-coreutils@gnu.org.
To suggest a patch, see the files README-hacking and HACKING for tips.

All of these programs except 'test' recognize the '--version' option.
When reporting bugs, please include in the subject line both the package
name/version and the name of the program for which you found a problem.

If you have a problem with 'sort', try running 'sort --debug', as it
can often help find and fix problems without having to wait for an
answer to a bug report.  If the debug output does not suffice to fix
the problem on your own, please compress and attach it to the rest of
your bug report.

IMPORTANT: if you take the time to report a test failure,
please be sure to include the output of running 'make check'
in verbose mode for each failing test.  For example,
if the test that fails is tests/df/df-P.sh, then you would
run this command:

  make check TESTS=tests/df/df-P.sh VERBOSE=yes SUBDIRS=. >> log 2>&1

For some tests, particularly perl tests, you can get even more detail by adding
DEBUG=yes. Then include the contents of the file 'log' in your bug report.


***************************************

There are many tests, but nowhere near as many as we need.
Additions and corrections are very welcome.

If you see a problem that you've already reported, feel free to re-report
it -- it won't bother us to get a reminder.  Besides, the more messages we
get regarding a particular problem the sooner it'll be fixed -- usually.
If you sent a complete patch and, after a couple weeks you haven't
received any acknowledgement, please ping us.  A complete patch includes
a well-written ChangeLog entry, unified (diff -u format) diffs relative
to the most recent test release (or, better, relative to the latest
sources in the public repository), an explanation for why the patch is
necessary or useful, and if at all possible, enough information to
reproduce whatever problem prompted it.  Plus, you'll earn lots of
karma if you include a test case to exercise any bug(s) you fix.
Here are instructions for checking out the latest development sources:

  https://savannah.gnu.org/git/?group=coreutils

For general documentation on the coding and usage standards
this distribution follows, see the GNU Coding Standards at:
https://www.gnu.org/prep/standards/

For any copyright year range specified as YYYY-ZZZZ in this package
note that the range specifies every single year in that closed interval.

Please see the file COPYING for copying conditions.

========================================================================

Copyright (C) 1998-2024 Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
Texts.  A copy of the license is included in the "GNU Free
Documentation License" file as part of this distribution.

Adafruit_ILI9341 ORIGINAL LIBRARY HEADER:
vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvStartvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
  This is our library for the Adafruit  ILI9341 Breakout and Shield
  ----> http://www.adafruit.com/products/1651

  Check out the links above for our tutorials and wiring diagrams
  These displays use SPI to communicate, 4 or 5 pins are required to
  interface (RST is optional)
  Adafruit invests time and resources providing this open source code,
  please support Adafruit and open-source hardware by purchasing
  products from Adafruit!

  Written by Limor Fried/Ladyada for Adafruit Industries.
  MIT license, all text above must be included in any redistribution
  
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^End^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Adafruit_GFX ORIGINAL LIBRARY LICENSE:
vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvStartvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

Software License Agreement (BSD License)

Copyright (c) 2012 Adafruit Industries.  All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

- Redistributions of source code must retain the above copyright notice,
  this list of conditions and the following disclaimer.
- Redistributions in binary form must reproduce the above copyright notice,
  this list of conditions and the following disclaimer in the documentation
  and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^End^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

TFT_eSPI ORIGINAL LIBRARY LICENSE:
vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvStartvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
Software License Agreement (FreeBSD License)

Copyright (c) 2020 Bodmer (https://github.com/Bodmer)

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

The views and conclusions contained in the software and documentation are those
of the authors and should not be interpreted as representing official policies,
either expressed or implied, of the FreeBSD Project.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^End^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

LovyanGFX ORIGINAL LIBRARY LICENSE:
vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvStartvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
Software License Agreement (FreeBSD License)

Copyright (c) 2020 lovyan03 (https://github.com/lovyan03)

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

The views and conclusions contained in the software and documentation are those
of the authors and should not be interpreted as representing official policies,
either expressed or implied, of the FreeBSD Project.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^End^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Copyright (c) 2013-2015 Steve Luken, www.linkedin.com/in/steveluken

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
if( ${CMAKE_VERSION} VERSION_GREATER "3.11.0" )
cmake_policy( SET CMP0077 NEW )
endif( ${CMAKE_VERSION} VERSION_GREATER "3.11.0" )
set_property(GLOBAL PROPERTY USE_FOLDERS On)
cmake_minimum_required(VERSION 3.20)

set(CMAKE_BUILD_TYPE "debug" CACHE STRING "Set build type")

set( CMAKE_BUILD_RPATH_USE_ORIGIN ON )
set( CMAKE_BUILD_WITH_INSTALL_RPATH ON )
set( CMAKE_INSTALL_RPATH_USE_LINK_PATH OFF )
set( CMAKE_SKIP_INSTALL_RPATH OFF )

if( NOT PROJECT_NAME )
project( Sack.all )
endif( NOT PROJECT_NAME )

# include this so default output paths get defined.
include( ${CMAKE_CURRENT_SOURCE_DIR}/../makefiles/cmake/DefaultInstall.cmake )

set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS
			${CMAKE_CONFIGURATION_TYPES} Debug Release RelWithDebInfo MinSizeRel )

include( ${CMAKE_CURRENT_LIST_DIR}/CMakeExtBuild.txt )

if( CMAKE_HOST_SYSTEM_NAME STREQUAL "Android" )
	DEFINE_DEFAULT( __ANDROID__ ON )
else( CMAKE_HOST_SYSTEM_NAME STREQUAL "Android")
	DEFINE_DEFAULT( __ANDROID__ OFF )
endif( CMAKE_HOST_SYSTEM_NAME STREQUAL "Android" )

if( NOT TARGET_INSTALL_PREFIX )
  SET(TARGET_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX} CACHE STRING  "Used to compile as installation path" )
endif( NOT TARGET_INSTALL_PREFIX )

if( __ANDROID__ )
   set( __NO_ODBC__ 1 )  # someday port unixodbc library?  But then the mysql driver needs to be ported
   set( __LINUX__ 1 )    # build as if it's linux
   DEFINE_DEFAULT( __ARM__ ON )
   set( D__ANDROID__ "-D__ANDROID__=${__ANDROID__} -DANDROID_DIR=${ANDROID_DIR} -DANDROID_NDK_VERSION=${ANDROID_NDK_VERSION}" )
   DEFINE_DEFAULT( BUILD_EXTRAS ON )
else( __ANDROID_ )
   DEFINE_DEFAULT( __ARM__ OFF )
   DEFINE_DEFAULT( BUILD_EXTRAS OFF )
endif( __ANDROID__ )

if( WIN32 OR __ANDROID__ )
DEFINE_DEFAULT( NEED_FREETYPE ON )
DEFINE_DEFAULT( NEED_JPEG ON )
DEFINE_DEFAULT( NEED_PNG ON )
DEFINE_DEFAULT( NEED_ZLIB ON )
DEFINE_DEFAULT( NEED_UUID OFF )
else( WIN32 OR __ANDROID__ )
DEFINE_DEFAULT( NEED_FREETYPE OFF )
DEFINE_DEFAULT( NEED_JPEG OFF )
DEFINE_DEFAULT( NEED_PNG OFF )
DEFINE_DEFAULT( NEED_ZLIB OFF )
set( __NO_ODBC__ 0 )  # someday port unixodbc library?  But then the mysql driver needs to be ported
set( __LINUX__ ON )
if(CMAKE_SIZEOF_VOID_P EQUAL 8)
  set( __LINUX64__ ON)
endif()
if( EXISTS /usr/include/uuid/uuid.h )
DEFINE_DEFAULT( NEED_UUID OFF )
else()
DEFINE_DEFAULT( NEED_UUID ON )
endif()
endif( WIN32 OR __ANDROID__ )

DEFINE_DEFAULT( BUILD_TESTS OFF )
DEFINE_DEFAULT( FORCE_MSVCRT  OFF )
DEFINE_DEFAULT( GENERATOR_BUILD_ALL_NOW  OFF )
DEFINE_DEFAULT( GENERATOR_BUILD_INSTALL_NOW  OFF )
DEFINE_DEFAULT( GENERATOR_BUILD_PACKAGE_NOW  OFF )
DEFINE_DEFAULT( DIRECTX_SDK "" )
DEFINE_DEFAULT( __CLR__ 0 )

IF(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
  if( CMAKE_BINARY_DIR MATCHES ${CMAKE_BUILD_TYPE}_solution\$ )
  SET(CMAKE_INSTALL_PREFIX
    ${CMAKE_BINARY_DIR}/../${CMAKE_BUILD_TYPE}_out CACHE PATH "Install default 'out' in this directory." FORCE
    )
    else()
  SET(CMAKE_INSTALL_PREFIX
    ${CMAKE_BINARY_DIR}/${CMAKE_BUILD_TYPE}_out CACHE PATH "Install default 'out' in this directory." FORCE
    )
  endif( CMAKE_BINARY_DIR MATCHES ${CMAKE_BUILD_TYPE}_solution\$ )
ENDIF(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
set( BULLET_SOURCE "${CMAKE_CURRENT_SOURCE_DIR}/../../bullet" CACHE STRING "bullet source path "  )
#OPTION( BULLET_SOURCE "bullet source path" "${CMAKE_CURRENT_SOURCE_DIR}/../../bullet/source" )
#OPTION( BUILD_MONOLITHIC "Build as one big library instead of parts" ${BUILD_MONOLITHIC} )
OPTION( BUILD_EXTRAS "Enable building extra projects (dekware, games, ... )" ${BUILD_EXTRAS} )
OPTION( BUILD_TESTS "Enable building test projects" ${BUILD_TESTS} )
OPTION( GENERATOR_BUILD_ALL_NOW "Enable building during the generate" ${GENERATOR_BUILD_ALL_NOW} )
OPTION( GENERATOR_BUILD_INSTALL_NOW "Enable building during the generate" ${GENERATOR_BUILD_INSTALL_NOW} )
OPTION( GENERATOR_BUILD_PACKAGE_NOW "Enable building installable packages (will mostly fail)" ${GENERATOR_BUILD_PACKAGE_NOW} )
OPTION( FORCE_MSVCRT "force using msvcrt instead of current version SDK libraries" ${FORCE_MSVCRT} )
#option( BUILD_UNICODE "Enable building everything as unicode" ${BUILD_UNICODE} )
option( __ANDROID__ "Enable target to android" ${__ANDROID__} )

if( DIRECTX_SDK )
# if directx had to be passed as an environment variable (has spaces)
# then it's already set, and don't have to pass it... otherwise we couldn't pass it.
  STRING( REPLACE "\\" "/" DDIRECTX_SDK -DDIRECTX_SDK=\"${DIRECTX_SDK}\" )
endif( DIRECTX_SDK )

if( BUILD_TESTS )
SET( DBUILD_TESTS -DBUILD_TESTS=${BUILD_TESTS} )
endif( BUILD_TESTS )

if( __CLR__ )
SET( D__CLR__ -D__CLR__=${__CLR__} )
endif( __CLR__ )

if( __LINUX__ )
SET( D__LINUX__ -D__LINUX__=${__LINUX__} )
endif( __LINUX__ )

if( __LINUX64__ )
SET( D__LINUX64__ -D__LINUX64__=${__LINUX64__} )
endif( __LINUX64__ )

if( __ARM__ )
SET( D__ARM__ -D__ARM__=${__ARM__} )
endif( __ARM__ )

if( FORCE_MSVCRT )
SET( DFORCE_MSVCRT -DFORCE_MSVCRT=${FORCE_MSVCRT} )
endif( FORCE_MSVCRT )


SET( SACK_REQUIREMENTS -DNEED_FREETYPE=${NEED_FREETYPE} -DNEED_JPEG=${NEED_JPEG} -DNEED_PNG=${NEED_PNG} -DNEED_ZLIB=${NEED_ZLIB} )
if( UNIX )
#message( "Not win32 (${WIN32}), UNIX(${UNIX}) but MINGW=\"${MINGW}\" maybe android? ; not passing need_externals" )
#set( SACK_REQUIREMENTS -DNEED_UUID=ON )
endif( UNIX )

IF(EXISTS ${BULLET_SOURCE}/CMakeLists.txt )
  if( WATCOM )
  else( WATCOM )
    set( BULLET_ENABLED ON )
    set( DBULLET_SOURCE -DBULLET_SOURCE=${BULLET_SOURCE} )
  endif( WATCOM )
endIF(EXISTS ${BULLET_SOURCE}/CMakeLists.txt )


set( PROJECT core )
set( EXTRA_FLAGS  -DBUILD_EXTRAS=${BUILD_EXTRAS}
			-D__NO_ODBC__=${__NO_ODBC__}
			\"-DTARGET_INSTALL_PREFIX=${TARGET_INSTALL_PREFIX}\"			
			${DDIRECTX_SDK}
        	        ${SACK_REQUIREMENTS} 
                	${DFORCE_MSVCRT} 
	                ${DBUILD_TESTS} 
                        ${DBULLET_SOURCE}
                        ${D__ARM__}
                        ${D__LINUX__}
                        ${D__LINUX64__}
                        ${D__ANDROID__}
                        ${D__CLR__}
                        ${DDX_SDK}
                )

set( PROJECT_BASE_PROJECT ${PROJECT} )
BuildProject( ${PROJECT} sack ${CMAKE_CURRENT_LIST_DIR}/.. SACK_SDK_ROOT_PATH ${EXTRA_FLAGS} )

set( EXTRA_FLAGS -DSACK_SDK_ROOT_PATH=${SACK_SDK_ROOT_PATH} )

#BuildProject( ${PROJECT}.framebuffer sack.nosolution ${CMAKE_CURRENT_LIST_DIR}/../not-exists UNUSED_SACK_SDK_ROOT_PATH ${EXTRA_FLAGS} )
#BuildProject( ${PROJECT}.puregl2 sack.nosolution ${CMAKE_CURRENT_LIST_DIR}/../not-exists UNUSED_SACK_SDK_ROOT_PATH ${EXTRA_FLAGS} )

if( NOT __ANDROID__ )
  # this calls sack_deploy to build cmakepackage
  # on android ended up making a cmake-configured-cmake-script to make this file.
#  Add_custom_command( TARGET Build${PROJECT} 
#	COMMAND ${SACK_SDK_ROOT_PATH}/${BINARY_OUTPUT_DIR}/sack_deploy${CMAKE_EXECUTABLE_SUFFIX} -nr
#	WORKING_DIRECTORY ${SACK_SDK_ROOT_PATH}
#  )                
endif( NOT __ANDROID__ )

if( NOT __CLR__ )
set( PROJECT binary )
set( EXTRA_FLAGS  -DSACK_SDK_ROOT_PATH=${SACK_SDK_ROOT_PATH} ${D__ANDROID__} )
BuildProject( ${PROJECT} sack.binaries ${CMAKE_CURRENT_LIST_DIR}/../binary SACK_BINARY_SDK_ROOT_PATH ${EXTRA_FLAGS} )
add_dependencies( ${LAST_TARGET} ${PROJECT_BASE_PROJECT} )
else( NOT __CLR__ )
message( "Disabled Binaries output for CLR build" )
endif( NOT __CLR__ )


set( PROJECT intershell )
set( EXTRA_FLAGS  -DSACK_SDK_ROOT_PATH=${SACK_SDK_ROOT_PATH} ${D__ANDROID__} )
BuildProject( ${PROJECT} ${PROJECT} ${CMAKE_CURRENT_LIST_DIR}/../src/InterShell.stable INTERSHELL_SDK_ROOT_PATH ${EXTRA_FLAGS} )
add_dependencies( ${LAST_TARGET} ${PROJECT_BASE_PROJECT} binary )

if( NOT __LINUX__ AND NOT __ANDROID__ )
  set( PROJECT intershell_Package )
  set( EXTRA_FLAGS  -DSACK_SDK_ROOT_PATH=${SACK_SDK_ROOT_PATH} ${D__ANDROID__} )
  BuildProject( ${PROJECT} Intershell.Package ${CMAKE_CURRENT_LIST_DIR}/../src/InterShell.stable/package INTERSHELL_PACKAGE_ROOT_PATH ${EXTRA_FLAGS} -DINTERSHELL_SDK_ROOT_PATH=${INTERSHELL_SDK_ROOT_PATH} )
  add_dependencies( ${LAST_TARGET} ${PROJECT_BASE_PROJECT} intershell )
endif( NOT __LINUX__ AND NOT __ANDROID__ )


#set( PROJECT intershell2 )
#set( EXTRA_FLAGS  -DSACK_SDK_ROOT_PATH=${SACK_SDK_ROOT_PATH} ${D__ANDROID__} )
#BuildProject( ${PROJECT} ${PROJECT} ${CMAKE_CURRENT_LIST_DIR}/../src/InterShell INTERSHELL2_SDK_ROOT_PATH ${EXTRA_FLAGS} )
#add_dependencies( ${LAST_TARGET} ${PROJECT_BASE_PROJECT} binary )

if( NOT __ANDROID__ )
  set( PROJECT mercurial_version_tagger )
  set( EXTRA_FLAGS  -DSACK_SDK_ROOT_PATH=${SACK_SDK_ROOT_PATH} ${D__ANDROID__} )
  BuildProject( ${PROJECT} ${PROJECT} ${CMAKE_CURRENT_LIST_DIR}/../src/utils/mercurial_version_tagger MERCURIAL_TAGGER_ROOT_PATH ${EXTRA_FLAGS} )
  add_dependencies( ${LAST_TARGET} ${PROJECT_BASE_PROJECT} )
endif( NOT __ANDROID__ )

IF( BULLET_ENABLED )
  message( "Congratz, you get Bullet projects" )
  if( NOT __ANDROID__ )
    set( PROJECT ball_mixer1 )
    set( EXTRA_FLAGS_MIXER  -DSACK_SDK_ROOT_PATH=${SACK_SDK_ROOT_PATH} -DSACK_BINARY_SDK_ROOT_PATH=${SACK_BINARY_SDK_ROOT_PATH} -DINTERSHELL_SDK_ROOT_PATH=${INTERSHELL_SDK_ROOT_PATH} ${D__ANDROID__} )
    BuildProject( ${PROJECT} ${PROJECT} ${CMAKE_CURRENT_LIST_DIR}/../src/games/ball_mixer INSTALL ${EXTRA_FLAGS_MIXER} )
    add_dependencies( ${LAST_TARGET} ${PROJECT_BASE_PROJECT} binary intershell )
  endif( NOT __ANDROID__ )

  set( PROJECT ball_mixer2 )
  set( EXTRA_FLAGS_MIXER  -DSACK_SDK_ROOT_PATH=${SACK_SDK_ROOT_PATH} -DSACK_BINARY_SDK_ROOT_PATH=${SACK_BINARY_SDK_ROOT_PATH} -DINTERSHELL_SDK_ROOT_PATH=${INTERSHELL_SDK_ROOT_PATH} ${D__ANDROID__} )
  BuildProject( ${PROJECT} ${PROJECT} ${CMAKE_CURRENT_LIST_DIR}/../src/games/ball_mixer2 INSTALL ${EXTRA_FLAGS_MIXER} )
  add_dependencies( ${LAST_TARGET} ${PROJECT_BASE_PROJECT} binary intershell )

ENDIF( BULLET_ENABLED )

if( BUILD_EXTRAS )
  include( ${CMAKE_CURRENT_LIST_DIR}/CMakeLists.extras.txt )
endif( BUILD_EXTRAS )
DEX UI is a handcrafted interface programmed in openFrameworks, running fullscreen underneath a functioning terminal, giving the experience of having a sci fi computer. More.
The project's source code is hosted here for reference. Included are the openFrameworks project source files and shaders, as well as the changes I made to BSPWM (more below). Not included are things like fonts and images.
Note: Dex UI was designed as an experiment or an art piece, not distributable software, so as a result, the code (though I've cleaned it up some) is not the easiest to sort through. Also, because it is no longer in development, I won't be trying to make this work on other people machines - that part's up to you.
What's Happening in the Video Demo
Real desktops revolve around windows, but most sci fi interfaces have these integrated desktops with all sort of animations and no apparent windows. Dex UI aimed to create the illusion of a desktop environment without windows while in reality still operating with windows (in X Windowing System).
To do this, the interface is a single openFrameworks program that handles all the animations. By modifying BSPWM I added a window mode to allow the interface to sit fullscreen beneath any other window. After the introduction animation occurs, a terminal (URXVT) is created above the interface and its size is constrained to the outline drawn in the interface. In short it is two layered windows, but because the windows have no borders or shadows, visually this looks like one integrated interface.
How do I run Dex UI
The code here is for an openFrameworks project. The first step is to get openFrameworks, and get the graphics examples running to confirm it's really working. Then you can start a new project and add the files. Beyond that, fonts and images are not included here, which may be problematic as all of the type work is hard coded.
How I contribute?
This project is here for reference and not in active development, so it is very unlikely I will continue to make changes, or respond to requests to make changes.
Why openFrameworks?
I needed something capable of creating lots of dynamic animations. This could be Processing, pure OpenGL, openFrameworks, etc. Originally my prototypes were in Processing, but for performance reasons I switched to openFrameworks. From what I've learned, many movie interfaces are put together in AfterEffects, so if you wanted to create an interface that did not respond to input, this is also an option.
BSPWM?
BSPWM was what I was working with, but it took some effort to make a window persistently stay fullscreen. The choice of window manager isn't a huge deal, just find something to make the illusion work.
I've also included a .diff file with the changes (to BSPWM commit c49bc92) I made to BSPWM to add what I (for no reason) named power mode. A window can be set to power mode making it stay fullscreen, beneath all other windows across multiple desktops. I've been told a similar effect can be achieved with wmutils, and this might be an easier route.
Font?
Inside the terminal we have Fira Mono, and the rest is United Sans Medium.
Is this working with real data
The keyboard contains some code to work using /dev/input, but the rest still needs to be hooked up to system data. Luckily this is straightforward and only requires replacing the generated data with sampled data.
Why the onscreen Keyboard, does it work with touch screens?
It's there because I think it looks cool. While it doesn't work with touch screens, it might be possible by making the project respond to mouse/touch input.
FlashDB is an ultra-lightweight embedded database that focuses on providing data storage solutions for embedded products. Different from traditional database based on file system, FlashDB combines the features of Flash and has strong performance and reliability. And under the premise of ensuring extremely low resource occupation, the service life of Flash should be extended as much as possible.
Nowadays, there are more and more types of IoT products, and the types and total amount of data generated during operation are also increasing. FlashDB provides a variety of data storage solutions, not only has a small resource footprint, but also has a large storage capacity, which is very suitable for IoT products. The following are the main application scenarios
BLDC motors are entering the hobby community more and more and many great projects have already emerged leveraging their far superior dynamics and power capabilities. BLDC motors have numerous advantages over regular DC motors but they have one big disadvantage, the complexity of control. Even though it has become relatively easy to design and manufacture PCBs and create our own hardware solutions for driving BLDC motors the proper low-cost solutions are yet to come. One of the reasons for this is the apparent complexity of writing the BLDC driving algorithms, Field oriented control (FOC) being an example of one of the most efficient ones. The solutions that can be found on-line are almost exclusively very specific for certain hardware configuration and the microcontroller architecture used. Additionally, most of the efforts at this moment are still channeled towards the high-power applications of the BLDC motors and proper low-cost and low-power FOC supporting boards are very hard to find today and even may not exist.
Please do not hesitate to leave an issue if you have problems/advices/suggestions regarding the code!
Pull requests are welcome, but let's first discuss them in community forum!
If you'd like to contribute to this project but you are not very familiar with github, don't worry, let us know either by posting at the community forum , by posting a github issue or at our discord server.
If you are familiar, we accept pull requests to the dev branch!
For all the questions regarding the potential implementation, applications, supported hardware and similar please visit our community forum or our discord server.
It is always helpful to hear the stories/problems/suggestions of people implementing the code and you might find a lot of answered questions there already!
We are very happy that SimpleFOClibrary has been used as a component of several research project and has made its way to several scientific papers. We are hoping that this trend is going to continue as the project matures and becomes more robust! A short resume paper about SimpleFOC has been published in the Journal of Open Source Software:
SimpleFOC: A Field Oriented Control (FOC) Library for Controlling Brushless Direct Current (BLDC) and Stepper Motors.
A. Skuric, HS. Bank, R. Unger, O. Williams, D. González-Reyes
Journal of Open Source Software, 7(74), 4232, https://doi.org/10.21105/joss.04232
If you are interested in citing SimpleFOClibrary or some other component of SimpleFOCproject in your research, we suggest you to cite our paper
These are the GNU core utilities.  This package is the union of
the GNU fileutils, sh-utils, and textutils packages.
Most of these programs have significant advantages over their Unix
counterparts, such as greater speed, additional options, and fewer
arbitrary limits.

The programs that can be built with this package are:

  [ arch b2sum base32 base64 basename basenc cat chcon chgrp chmod chown
  chroot cksum comm coreutils cp csplit cut date dd df dir dircolors dirname
  du echo env expand expr factor false fmt fold groups head hostid hostname
  id install join kill link ln logname ls md5sum mkdir mkfifo mknod mktemp
  mv nice nl nohup nproc numfmt od paste pathchk pinky pr printenv printf ptx
  pwd readlink realpath rm rmdir runcon seq sha1sum sha224sum sha256sum
  sha384sum sha512sum shred shuf sleep sort split stat stdbuf stty sum sync
  tac tail tee test timeout touch tr true truncate tsort tty uname unexpand
  uniq unlink uptime users vdir wc who whoami yes

See the file NEWS for a list of major changes in the current release.

If you obtained this file as part of a "git clone", then see the
README-hacking file.  If this file came to you as part of a tar archive,
then see the file INSTALL for general compilation and installation
instructions, or README-install for system and coreutils specific instructions.

Like the rest of the GNU system, these programs mostly conform to
POSIX, with BSD and other extensions.  For closer conformance, or
conformance to a particular POSIX version, set the POSIXLY_CORRECT
and the _POSIX2_VERSION environment variables, as described in
the documentation under "Standards conformance".

The ls, dir, and vdir commands are all separate executables instead of
one program that checks argv[0] because people often rename these
programs to things like gls, gnuls, l, etc.  Renaming a program
file shouldn't affect how it operates, so that people can get the
behavior they want with whatever name they want.

Special thanks to Paul Eggert, Brian Matthews, Bruce Evans, Karl Berry,
Kaveh Ghazi, and François Pinard for help with debugging and porting
these programs.  Many thanks to all of the people who have taken the
time to submit problem reports and fixes.  All contributed changes are
attributed in the commit logs.

And thanks to the following people who have provided accounts for
portability testing on many different types of systems: Bob Proulx,
Christian Robert, François Pinard, Greg McGary, Harlan Stenn,
Joel N. Weber, Mark D. Roth, Matt Schalit, Nelson H. F. Beebe,
Réjean Payette, Sam Tardieu.

Thanks to Michael Stone for inflicting test releases of this package
on Debian's unstable distribution, and to all the kind folks who used
that distribution and found and reported bugs.

Note that each man page is now automatically generated from a template
and from the corresponding --help usage message.  Patches to the template
files (man/*.x) are welcome.  However, the authoritative documentation
is in texinfo form in the doc directory.


***************
Feature requests:
---------------

If you would like to add a new feature, please try to get some sort of
consensus that it is a worthwhile change.  One way to do that is to send
mail to coreutils@gnu.org including as much description and justification
as you can.  Based on the feedback that generates, you may be able to
convince us that it's worth adding.  Please also consult the list of
previously discussed but ultimately rejected feature requests at:
https://www.gnu.org/software/coreutils/rejected_requests.html


***************
Reporting bugs:
---------------

Send bug reports, questions, comments, etc. to bug-coreutils@gnu.org.
To suggest a patch, see the files README-hacking and HACKING for tips.

All of these programs except 'test' recognize the '--version' option.
When reporting bugs, please include in the subject line both the package
name/version and the name of the program for which you found a problem.

If you have a problem with 'sort', try running 'sort --debug', as it
can often help find and fix problems without having to wait for an
answer to a bug report.  If the debug output does not suffice to fix
the problem on your own, please compress and attach it to the rest of
your bug report.

IMPORTANT: if you take the time to report a test failure,
please be sure to include the output of running 'make check'
in verbose mode for each failing test.  For example,
if the test that fails is tests/df/df-P.sh, then you would
run this command:

  make check TESTS=tests/df/df-P.sh VERBOSE=yes SUBDIRS=. >> log 2>&1

For some tests, particularly perl tests, you can get even more detail by adding
DEBUG=yes. Then include the contents of the file 'log' in your bug report.


***************************************

There are many tests, but nowhere near as many as we need.
Additions and corrections are very welcome.

If you see a problem that you've already reported, feel free to re-report
it -- it won't bother us to get a reminder.  Besides, the more messages we
get regarding a particular problem the sooner it'll be fixed -- usually.
If you sent a complete patch and, after a couple weeks you haven't
received any acknowledgement, please ping us.  A complete patch includes
a well-written ChangeLog entry, unified (diff -u format) diffs relative
to the most recent test release (or, better, relative to the latest
sources in the public repository), an explanation for why the patch is
necessary or useful, and if at all possible, enough information to
reproduce whatever problem prompted it.  Plus, you'll earn lots of
karma if you include a test case to exercise any bug(s) you fix.
Here are instructions for checking out the latest development sources:

  https://savannah.gnu.org/git/?group=coreutils

For general documentation on the coding and usage standards
this distribution follows, see the GNU Coding Standards at:
https://www.gnu.org/prep/standards/

For any copyright year range specified as YYYY-ZZZZ in this package
note that the range specifies every single year in that closed interval.

Please see the file COPYING for copying conditions.

========================================================================

Copyright (C) 1998-2024 Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
Texts.  A copy of the license is included in the "GNU Free
Documentation License" file as part of this distribution.

Adafruit_ILI9341 ORIGINAL LIBRARY HEADER:
vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvStartvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
  This is our library for the Adafruit  ILI9341 Breakout and Shield
  ----> http://www.adafruit.com/products/1651

  Check out the links above for our tutorials and wiring diagrams
  These displays use SPI to communicate, 4 or 5 pins are required to
  interface (RST is optional)
  Adafruit invests time and resources providing this open source code,
  please support Adafruit and open-source hardware by purchasing
  products from Adafruit!

  Written by Limor Fried/Ladyada for Adafruit Industries.
  MIT license, all text above must be included in any redistribution
  
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^End^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Adafruit_GFX ORIGINAL LIBRARY LICENSE:
vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvStartvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

Software License Agreement (BSD License)

Copyright (c) 2012 Adafruit Industries.  All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

- Redistributions of source code must retain the above copyright notice,
  this list of conditions and the following disclaimer.
- Redistributions in binary form must reproduce the above copyright notice,
  this list of conditions and the following disclaimer in the documentation
  and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^End^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

TFT_eSPI ORIGINAL LIBRARY LICENSE:
vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvStartvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
Software License Agreement (FreeBSD License)

Copyright (c) 2020 Bodmer (https://github.com/Bodmer)

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

The views and conclusions contained in the software and documentation are those
of the authors and should not be interpreted as representing official policies,
either expressed or implied, of the FreeBSD Project.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^End^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

LovyanGFX ORIGINAL LIBRARY LICENSE:
vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvStartvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
Software License Agreement (FreeBSD License)

Copyright (c) 2020 lovyan03 (https://github.com/lovyan03)

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

The views and conclusions contained in the software and documentation are those
of the authors and should not be interpreted as representing official policies,
either expressed or implied, of the FreeBSD Project.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^End^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Copyright (c) 2013-2015 Steve Luken, www.linkedin.com/in/steveluken

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
if( ${CMAKE_VERSION} VERSION_GREATER "3.11.0" )
cmake_policy( SET CMP0077 NEW )
endif( ${CMAKE_VERSION} VERSION_GREATER "3.11.0" )
set_property(GLOBAL PROPERTY USE_FOLDERS On)
cmake_minimum_required(VERSION 3.20)

set(CMAKE_BUILD_TYPE "debug" CACHE STRING "Set build type")

set( CMAKE_BUILD_RPATH_USE_ORIGIN ON )
set( CMAKE_BUILD_WITH_INSTALL_RPATH ON )
set( CMAKE_INSTALL_RPATH_USE_LINK_PATH OFF )
set( CMAKE_SKIP_INSTALL_RPATH OFF )

if( NOT PROJECT_NAME )
project( Sack.all )
endif( NOT PROJECT_NAME )

# include this so default output paths get defined.
include( ${CMAKE_CURRENT_SOURCE_DIR}/../makefiles/cmake/DefaultInstall.cmake )

set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS
			${CMAKE_CONFIGURATION_TYPES} Debug Release RelWithDebInfo MinSizeRel )

include( ${CMAKE_CURRENT_LIST_DIR}/CMakeExtBuild.txt )

if( CMAKE_HOST_SYSTEM_NAME STREQUAL "Android" )
	DEFINE_DEFAULT( __ANDROID__ ON )
else( CMAKE_HOST_SYSTEM_NAME STREQUAL "Android")
	DEFINE_DEFAULT( __ANDROID__ OFF )
endif( CMAKE_HOST_SYSTEM_NAME STREQUAL "Android" )

if( NOT TARGET_INSTALL_PREFIX )
  SET(TARGET_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX} CACHE STRING  "Used to compile as installation path" )
endif( NOT TARGET_INSTALL_PREFIX )

if( __ANDROID__ )
   set( __NO_ODBC__ 1 )  # someday port unixodbc library?  But then the mysql driver needs to be ported
   set( __LINUX__ 1 )    # build as if it's linux
   DEFINE_DEFAULT( __ARM__ ON )
   set( D__ANDROID__ "-D__ANDROID__=${__ANDROID__} -DANDROID_DIR=${ANDROID_DIR} -DANDROID_NDK_VERSION=${ANDROID_NDK_VERSION}" )
   DEFINE_DEFAULT( BUILD_EXTRAS ON )
else( __ANDROID_ )
   DEFINE_DEFAULT( __ARM__ OFF )
   DEFINE_DEFAULT( BUILD_EXTRAS OFF )
endif( __ANDROID__ )

if( WIN32 OR __ANDROID__ )
DEFINE_DEFAULT( NEED_FREETYPE ON )
DEFINE_DEFAULT( NEED_JPEG ON )
DEFINE_DEFAULT( NEED_PNG ON )
DEFINE_DEFAULT( NEED_ZLIB ON )
DEFINE_DEFAULT( NEED_UUID OFF )
else( WIN32 OR __ANDROID__ )
DEFINE_DEFAULT( NEED_FREETYPE OFF )
DEFINE_DEFAULT( NEED_JPEG OFF )
DEFINE_DEFAULT( NEED_PNG OFF )
DEFINE_DEFAULT( NEED_ZLIB OFF )
set( __NO_ODBC__ 0 )  # someday port unixodbc library?  But then the mysql driver needs to be ported
set( __LINUX__ ON )
if(CMAKE_SIZEOF_VOID_P EQUAL 8)
  set( __LINUX64__ ON)
endif()
if( EXISTS /usr/include/uuid/uuid.h )
DEFINE_DEFAULT( NEED_UUID OFF )
else()
DEFINE_DEFAULT( NEED_UUID ON )
endif()
endif( WIN32 OR __ANDROID__ )

DEFINE_DEFAULT( BUILD_TESTS OFF )
DEFINE_DEFAULT( FORCE_MSVCRT  OFF )
DEFINE_DEFAULT( GENERATOR_BUILD_ALL_NOW  OFF )
DEFINE_DEFAULT( GENERATOR_BUILD_INSTALL_NOW  OFF )
DEFINE_DEFAULT( GENERATOR_BUILD_PACKAGE_NOW  OFF )
DEFINE_DEFAULT( DIRECTX_SDK "" )
DEFINE_DEFAULT( __CLR__ 0 )

IF(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
  if( CMAKE_BINARY_DIR MATCHES ${CMAKE_BUILD_TYPE}_solution\$ )
  SET(CMAKE_INSTALL_PREFIX
    ${CMAKE_BINARY_DIR}/../${CMAKE_BUILD_TYPE}_out CACHE PATH "Install default 'out' in this directory." FORCE
    )
    else()
  SET(CMAKE_INSTALL_PREFIX
    ${CMAKE_BINARY_DIR}/${CMAKE_BUILD_TYPE}_out CACHE PATH "Install default 'out' in this directory." FORCE
    )
  endif( CMAKE_BINARY_DIR MATCHES ${CMAKE_BUILD_TYPE}_solution\$ )
ENDIF(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
set( BULLET_SOURCE "${CMAKE_CURRENT_SOURCE_DIR}/../../bullet" CACHE STRING "bullet source path "  )
#OPTION( BULLET_SOURCE "bullet source path" "${CMAKE_CURRENT_SOURCE_DIR}/../../bullet/source" )
#OPTION( BUILD_MONOLITHIC "Build as one big library instead of parts" ${BUILD_MONOLITHIC} )
OPTION( BUILD_EXTRAS "Enable building extra projects (dekware, games, ... )" ${BUILD_EXTRAS} )
OPTION( BUILD_TESTS "Enable building test projects" ${BUILD_TESTS} )
OPTION( GENERATOR_BUILD_ALL_NOW "Enable building during the generate" ${GENERATOR_BUILD_ALL_NOW} )
OPTION( GENERATOR_BUILD_INSTALL_NOW "Enable building during the generate" ${GENERATOR_BUILD_INSTALL_NOW} )
OPTION( GENERATOR_BUILD_PACKAGE_NOW "Enable building installable packages (will mostly fail)" ${GENERATOR_BUILD_PACKAGE_NOW} )
OPTION( FORCE_MSVCRT "force using msvcrt instead of current version SDK libraries" ${FORCE_MSVCRT} )
#option( BUILD_UNICODE "Enable building everything as unicode" ${BUILD_UNICODE} )
option( __ANDROID__ "Enable target to android" ${__ANDROID__} )

if( DIRECTX_SDK )
# if directx had to be passed as an environment variable (has spaces)
# then it's already set, and don't have to pass it... otherwise we couldn't pass it.
  STRING( REPLACE "\\" "/" DDIRECTX_SDK -DDIRECTX_SDK=\"${DIRECTX_SDK}\" )
endif( DIRECTX_SDK )

if( BUILD_TESTS )
SET( DBUILD_TESTS -DBUILD_TESTS=${BUILD_TESTS} )
endif( BUILD_TESTS )

if( __CLR__ )
SET( D__CLR__ -D__CLR__=${__CLR__} )
endif( __CLR__ )

if( __LINUX__ )
SET( D__LINUX__ -D__LINUX__=${__LINUX__} )
endif( __LINUX__ )

if( __LINUX64__ )
SET( D__LINUX64__ -D__LINUX64__=${__LINUX64__} )
endif( __LINUX64__ )

if( __ARM__ )
SET( D__ARM__ -D__ARM__=${__ARM__} )
endif( __ARM__ )

if( FORCE_MSVCRT )
SET( DFORCE_MSVCRT -DFORCE_MSVCRT=${FORCE_MSVCRT} )
endif( FORCE_MSVCRT )


SET( SACK_REQUIREMENTS -DNEED_FREETYPE=${NEED_FREETYPE} -DNEED_JPEG=${NEED_JPEG} -DNEED_PNG=${NEED_PNG} -DNEED_ZLIB=${NEED_ZLIB} )
if( UNIX )
#message( "Not win32 (${WIN32}), UNIX(${UNIX}) but MINGW=\"${MINGW}\" maybe android? ; not passing need_externals" )
#set( SACK_REQUIREMENTS -DNEED_UUID=ON )
endif( UNIX )

IF(EXISTS ${BULLET_SOURCE}/CMakeLists.txt )
  if( WATCOM )
  else( WATCOM )
    set( BULLET_ENABLED ON )
    set( DBULLET_SOURCE -DBULLET_SOURCE=${BULLET_SOURCE} )
  endif( WATCOM )
endIF(EXISTS ${BULLET_SOURCE}/CMakeLists.txt )


set( PROJECT core )
set( EXTRA_FLAGS  -DBUILD_EXTRAS=${BUILD_EXTRAS}
			-D__NO_ODBC__=${__NO_ODBC__}
			\"-DTARGET_INSTALL_PREFIX=${TARGET_INSTALL_PREFIX}\"			
			${DDIRECTX_SDK}
        	        ${SACK_REQUIREMENTS} 
                	${DFORCE_MSVCRT} 
	                ${DBUILD_TESTS} 
                        ${DBULLET_SOURCE}
                        ${D__ARM__}
                        ${D__LINUX__}
                        ${D__LINUX64__}
                        ${D__ANDROID__}
                        ${D__CLR__}
                        ${DDX_SDK}
                )

set( PROJECT_BASE_PROJECT ${PROJECT} )
BuildProject( ${PROJECT} sack ${CMAKE_CURRENT_LIST_DIR}/.. SACK_SDK_ROOT_PATH ${EXTRA_FLAGS} )

set( EXTRA_FLAGS -DSACK_SDK_ROOT_PATH=${SACK_SDK_ROOT_PATH} )

#BuildProject( ${PROJECT}.framebuffer sack.nosolution ${CMAKE_CURRENT_LIST_DIR}/../not-exists UNUSED_SACK_SDK_ROOT_PATH ${EXTRA_FLAGS} )
#BuildProject( ${PROJECT}.puregl2 sack.nosolution ${CMAKE_CURRENT_LIST_DIR}/../not-exists UNUSED_SACK_SDK_ROOT_PATH ${EXTRA_FLAGS} )

if( NOT __ANDROID__ )
  # this calls sack_deploy to build cmakepackage
  # on android ended up making a cmake-configured-cmake-script to make this file.
#  Add_custom_command( TARGET Build${PROJECT} 
#	COMMAND ${SACK_SDK_ROOT_PATH}/${BINARY_OUTPUT_DIR}/sack_deploy${CMAKE_EXECUTABLE_SUFFIX} -nr
#	WORKING_DIRECTORY ${SACK_SDK_ROOT_PATH}
#  )                
endif( NOT __ANDROID__ )

if( NOT __CLR__ )
set( PROJECT binary )
set( EXTRA_FLAGS  -DSACK_SDK_ROOT_PATH=${SACK_SDK_ROOT_PATH} ${D__ANDROID__} )
BuildProject( ${PROJECT} sack.binaries ${CMAKE_CURRENT_LIST_DIR}/../binary SACK_BINARY_SDK_ROOT_PATH ${EXTRA_FLAGS} )
add_dependencies( ${LAST_TARGET} ${PROJECT_BASE_PROJECT} )
else( NOT __CLR__ )
message( "Disabled Binaries output for CLR build" )
endif( NOT __CLR__ )


set( PROJECT intershell )
set( EXTRA_FLAGS  -DSACK_SDK_ROOT_PATH=${SACK_SDK_ROOT_PATH} ${D__ANDROID__} )
BuildProject( ${PROJECT} ${PROJECT} ${CMAKE_CURRENT_LIST_DIR}/../src/InterShell.stable INTERSHELL_SDK_ROOT_PATH ${EXTRA_FLAGS} )
add_dependencies( ${LAST_TARGET} ${PROJECT_BASE_PROJECT} binary )

if( NOT __LINUX__ AND NOT __ANDROID__ )
  set( PROJECT intershell_Package )
  set( EXTRA_FLAGS  -DSACK_SDK_ROOT_PATH=${SACK_SDK_ROOT_PATH} ${D__ANDROID__} )
  BuildProject( ${PROJECT} Intershell.Package ${CMAKE_CURRENT_LIST_DIR}/../src/InterShell.stable/package INTERSHELL_PACKAGE_ROOT_PATH ${EXTRA_FLAGS} -DINTERSHELL_SDK_ROOT_PATH=${INTERSHELL_SDK_ROOT_PATH} )
  add_dependencies( ${LAST_TARGET} ${PROJECT_BASE_PROJECT} intershell )
endif( NOT __LINUX__ AND NOT __ANDROID__ )


#set( PROJECT intershell2 )
#set( EXTRA_FLAGS  -DSACK_SDK_ROOT_PATH=${SACK_SDK_ROOT_PATH} ${D__ANDROID__} )
#BuildProject( ${PROJECT} ${PROJECT} ${CMAKE_CURRENT_LIST_DIR}/../src/InterShell INTERSHELL2_SDK_ROOT_PATH ${EXTRA_FLAGS} )
#add_dependencies( ${LAST_TARGET} ${PROJECT_BASE_PROJECT} binary )

if( NOT __ANDROID__ )
  set( PROJECT mercurial_version_tagger )
  set( EXTRA_FLAGS  -DSACK_SDK_ROOT_PATH=${SACK_SDK_ROOT_PATH} ${D__ANDROID__} )
  BuildProject( ${PROJECT} ${PROJECT} ${CMAKE_CURRENT_LIST_DIR}/../src/utils/mercurial_version_tagger MERCURIAL_TAGGER_ROOT_PATH ${EXTRA_FLAGS} )
  add_dependencies( ${LAST_TARGET} ${PROJECT_BASE_PROJECT} )
endif( NOT __ANDROID__ )

IF( BULLET_ENABLED )
  message( "Congratz, you get Bullet projects" )
  if( NOT __ANDROID__ )
    set( PROJECT ball_mixer1 )
    set( EXTRA_FLAGS_MIXER  -DSACK_SDK_ROOT_PATH=${SACK_SDK_ROOT_PATH} -DSACK_BINARY_SDK_ROOT_PATH=${SACK_BINARY_SDK_ROOT_PATH} -DINTERSHELL_SDK_ROOT_PATH=${INTERSHELL_SDK_ROOT_PATH} ${D__ANDROID__} )
    BuildProject( ${PROJECT} ${PROJECT} ${CMAKE_CURRENT_LIST_DIR}/../src/games/ball_mixer INSTALL ${EXTRA_FLAGS_MIXER} )
    add_dependencies( ${LAST_TARGET} ${PROJECT_BASE_PROJECT} binary intershell )
  endif( NOT __ANDROID__ )

  set( PROJECT ball_mixer2 )
  set( EXTRA_FLAGS_MIXER  -DSACK_SDK_ROOT_PATH=${SACK_SDK_ROOT_PATH} -DSACK_BINARY_SDK_ROOT_PATH=${SACK_BINARY_SDK_ROOT_PATH} -DINTERSHELL_SDK_ROOT_PATH=${INTERSHELL_SDK_ROOT_PATH} ${D__ANDROID__} )
  BuildProject( ${PROJECT} ${PROJECT} ${CMAKE_CURRENT_LIST_DIR}/../src/games/ball_mixer2 INSTALL ${EXTRA_FLAGS_MIXER} )
  add_dependencies( ${LAST_TARGET} ${PROJECT_BASE_PROJECT} binary intershell )

ENDIF( BULLET_ENABLED )

if( BUILD_EXTRAS )
  include( ${CMAKE_CURRENT_LIST_DIR}/CMakeLists.extras.txt )
endif( BUILD_EXTRAS )
DEX UI is a handcrafted interface programmed in openFrameworks, running fullscreen underneath a functioning terminal, giving the experience of having a sci fi computer. More.
The project's source code is hosted here for reference. Included are the openFrameworks project source files and shaders, as well as the changes I made to BSPWM (more below). Not included are things like fonts and images.
Note: Dex UI was designed as an experiment or an art piece, not distributable software, so as a result, the code (though I've cleaned it up some) is not the easiest to sort through. Also, because it is no longer in development, I won't be trying to make this work on other people machines - that part's up to you.
What's Happening in the Video Demo
Real desktops revolve around windows, but most sci fi interfaces have these integrated desktops with all sort of animations and no apparent windows. Dex UI aimed to create the illusion of a desktop environment without windows while in reality still operating with windows (in X Windowing System).
To do this, the interface is a single openFrameworks program that handles all the animations. By modifying BSPWM I added a window mode to allow the interface to sit fullscreen beneath any other window. After the introduction animation occurs, a terminal (URXVT) is created above the interface and its size is constrained to the outline drawn in the interface. In short it is two layered windows, but because the windows have no borders or shadows, visually this looks like one integrated interface.
How do I run Dex UI
The code here is for an openFrameworks project. The first step is to get openFrameworks, and get the graphics examples running to confirm it's really working. Then you can start a new project and add the files. Beyond that, fonts and images are not included here, which may be problematic as all of the type work is hard coded.
How I contribute?
This project is here for reference and not in active development, so it is very unlikely I will continue to make changes, or respond to requests to make changes.
Why openFrameworks?
I needed something capable of creating lots of dynamic animations. This could be Processing, pure OpenGL, openFrameworks, etc. Originally my prototypes were in Processing, but for performance reasons I switched to openFrameworks. From what I've learned, many movie interfaces are put together in AfterEffects, so if you wanted to create an interface that did not respond to input, this is also an option.
BSPWM?
BSPWM was what I was working with, but it took some effort to make a window persistently stay fullscreen. The choice of window manager isn't a huge deal, just find something to make the illusion work.
I've also included a .diff file with the changes (to BSPWM commit c49bc92) I made to BSPWM to add what I (for no reason) named power mode. A window can be set to power mode making it stay fullscreen, beneath all other windows across multiple desktops. I've been told a similar effect can be achieved with wmutils, and this might be an easier route.
Font?
Inside the terminal we have Fira Mono, and the rest is United Sans Medium.
Is this working with real data
The keyboard contains some code to work using /dev/input, but the rest still needs to be hooked up to system data. Luckily this is straightforward and only requires replacing the generated data with sampled data.
Why the onscreen Keyboard, does it work with touch screens?
It's there because I think it looks cool. While it doesn't work with touch screens, it might be possible by making the project respond to mouse/touch input.
FlashDB is an ultra-lightweight embedded database that focuses on providing data storage solutions for embedded products. Different from traditional database based on file system, FlashDB combines the features of Flash and has strong performance and reliability. And under the premise of ensuring extremely low resource occupation, the service life of Flash should be extended as much as possible.
Nowadays, there are more and more types of IoT products, and the types and total amount of data generated during operation are also increasing. FlashDB provides a variety of data storage solutions, not only has a small resource footprint, but also has a large storage capacity, which is very suitable for IoT products. The following are the main application scenarios
BLDC motors are entering the hobby community more and more and many great projects have already emerged leveraging their far superior dynamics and power capabilities. BLDC motors have numerous advantages over regular DC motors but they have one big disadvantage, the complexity of control. Even though it has become relatively easy to design and manufacture PCBs and create our own hardware solutions for driving BLDC motors the proper low-cost solutions are yet to come. One of the reasons for this is the apparent complexity of writing the BLDC driving algorithms, Field oriented control (FOC) being an example of one of the most efficient ones. The solutions that can be found on-line are almost exclusively very specific for certain hardware configuration and the microcontroller architecture used. Additionally, most of the efforts at this moment are still channeled towards the high-power applications of the BLDC motors and proper low-cost and low-power FOC supporting boards are very hard to find today and even may not exist.
Please do not hesitate to leave an issue if you have problems/advices/suggestions regarding the code!
Pull requests are welcome, but let's first discuss them in community forum!
If you'd like to contribute to this project but you are not very familiar with github, don't worry, let us know either by posting at the community forum , by posting a github issue or at our discord server.
If you are familiar, we accept pull requests to the dev branch!
For all the questions regarding the potential implementation, applications, supported hardware and similar please visit our community forum or our discord server.
It is always helpful to hear the stories/problems/suggestions of people implementing the code and you might find a lot of answered questions there already!
We are very happy that SimpleFOClibrary has been used as a component of several research project and has made its way to several scientific papers. We are hoping that this trend is going to continue as the project matures and becomes more robust! A short resume paper about SimpleFOC has been published in the Journal of Open Source Software:
SimpleFOC: A Field Oriented Control (FOC) Library for Controlling Brushless Direct Current (BLDC) and Stepper Motors.
A. Skuric, HS. Bank, R. Unger, O. Williams, D. González-Reyes
Journal of Open Source Software, 7(74), 4232, https://doi.org/10.21105/joss.04232
If you are interested in citing SimpleFOClibrary or some other component of SimpleFOCproject in your research, we suggest you to cite our paper
These are the GNU core utilities.  This package is the union of
the GNU fileutils, sh-utils, and textutils packages.
Most of these programs have significant advantages over their Unix
counterparts, such as greater speed, additional options, and fewer
arbitrary limits.

The programs that can be built with this package are:

  [ arch b2sum base32 base64 basename basenc cat chcon chgrp chmod chown
  chroot cksum comm coreutils cp csplit cut date dd df dir dircolors dirname
  du echo env expand expr factor false fmt fold groups head hostid hostname
  id install join kill link ln logname ls md5sum mkdir mkfifo mknod mktemp
  mv nice nl nohup nproc numfmt od paste pathchk pinky pr printenv printf ptx
  pwd readlink realpath rm rmdir runcon seq sha1sum sha224sum sha256sum
  sha384sum sha512sum shred shuf sleep sort split stat stdbuf stty sum sync
  tac tail tee test timeout touch tr true truncate tsort tty uname unexpand
  uniq unlink uptime users vdir wc who whoami yes

See the file NEWS for a list of major changes in the current release.

If you obtained this file as part of a "git clone", then see the
README-hacking file.  If this file came to you as part of a tar archive,
then see the file INSTALL for general compilation and installation
instructions, or README-install for system and coreutils specific instructions.

Like the rest of the GNU system, these programs mostly conform to
POSIX, with BSD and other extensions.  For closer conformance, or
conformance to a particular POSIX version, set the POSIXLY_CORRECT
and the _POSIX2_VERSION environment variables, as described in
the documentation under "Standards conformance".

The ls, dir, and vdir commands are all separate executables instead of
one program that checks argv[0] because people often rename these
programs to things like gls, gnuls, l, etc.  Renaming a program
file shouldn't affect how it operates, so that people can get the
behavior they want with whatever name they want.

Special thanks to Paul Eggert, Brian Matthews, Bruce Evans, Karl Berry,
Kaveh Ghazi, and François Pinard for help with debugging and porting
these programs.  Many thanks to all of the people who have taken the
time to submit problem reports and fixes.  All contributed changes are
attributed in the commit logs.

And thanks to the following people who have provided accounts for
portability testing on many different types of systems: Bob Proulx,
Christian Robert, François Pinard, Greg McGary, Harlan Stenn,
Joel N. Weber, Mark D. Roth, Matt Schalit, Nelson H. F. Beebe,
Réjean Payette, Sam Tardieu.

Thanks to Michael Stone for inflicting test releases of this package
on Debian's unstable distribution, and to all the kind folks who used
that distribution and found and reported bugs.

Note that each man page is now automatically generated from a template
and from the corresponding --help usage message.  Patches to the template
files (man/*.x) are welcome.  However, the authoritative documentation
is in texinfo form in the doc directory.


***************
Feature requests:
---------------

If you would like to add a new feature, please try to get some sort of
consensus that it is a worthwhile change.  One way to do that is to send
mail to coreutils@gnu.org including as much description and justification
as you can.  Based on the feedback that generates, you may be able to
convince us that it's worth adding.  Please also consult the list of
previously discussed but ultimately rejected feature requests at:
https://www.gnu.org/software/coreutils/rejected_requests.html


***************
Reporting bugs:
---------------

Send bug reports, questions, comments, etc. to bug-coreutils@gnu.org.
To suggest a patch, see the files README-hacking and HACKING for tips.

All of these programs except 'test' recognize the '--version' option.
When reporting bugs, please include in the subject line both the package
name/version and the name of the program for which you found a problem.

If you have a problem with 'sort', try running 'sort --debug', as it
can often help find and fix problems without having to wait for an
answer to a bug report.  If the debug output does not suffice to fix
the problem on your own, please compress and attach it to the rest of
your bug report.

IMPORTANT: if you take the time to report a test failure,
please be sure to include the output of running 'make check'
in verbose mode for each failing test.  For example,
if the test that fails is tests/df/df-P.sh, then you would
run this command:

  make check TESTS=tests/df/df-P.sh VERBOSE=yes SUBDIRS=. >> log 2>&1

For some tests, particularly perl tests, you can get even more detail by adding
DEBUG=yes. Then include the contents of the file 'log' in your bug report.


***************************************

There are many tests, but nowhere near as many as we need.
Additions and corrections are very welcome.

If you see a problem that you've already reported, feel free to re-report
it -- it won't bother us to get a reminder.  Besides, the more messages we
get regarding a particular problem the sooner it'll be fixed -- usually.
If you sent a complete patch and, after a couple weeks you haven't
received any acknowledgement, please ping us.  A complete patch includes
a well-written ChangeLog entry, unified (diff -u format) diffs relative
to the most recent test release (or, better, relative to the latest
sources in the public repository), an explanation for why the patch is
necessary or useful, and if at all possible, enough information to
reproduce whatever problem prompted it.  Plus, you'll earn lots of
karma if you include a test case to exercise any bug(s) you fix.
Here are instructions for checking out the latest development sources:

  https://savannah.gnu.org/git/?group=coreutils

For general documentation on the coding and usage standards
this distribution follows, see the GNU Coding Standards at:
https://www.gnu.org/prep/standards/

For any copyright year range specified as YYYY-ZZZZ in this package
note that the range specifies every single year in that closed interval.

Please see the file COPYING for copying conditions.

========================================================================

Copyright (C) 1998-2024 Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
Texts.  A copy of the license is included in the "GNU Free
Documentation License" file as part of this distribution.

Adafruit_ILI9341 ORIGINAL LIBRARY HEADER:
vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvStartvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
  This is our library for the Adafruit  ILI9341 Breakout and Shield
  ----> http://www.adafruit.com/products/1651

  Check out the links above for our tutorials and wiring diagrams
  These displays use SPI to communicate, 4 or 5 pins are required to
  interface (RST is optional)
  Adafruit invests time and resources providing this open source code,
  please support Adafruit and open-source hardware by purchasing
  products from Adafruit!

  Written by Limor Fried/Ladyada for Adafruit Industries.
  MIT license, all text above must be included in any redistribution
  
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^End^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Adafruit_GFX ORIGINAL LIBRARY LICENSE:
vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvStartvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

Software License Agreement (BSD License)

Copyright (c) 2012 Adafruit Industries.  All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

- Redistributions of source code must retain the above copyright notice,
  this list of conditions and the following disclaimer.
- Redistributions in binary form must reproduce the above copyright notice,
  this list of conditions and the following disclaimer in the documentation
  and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^End^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

TFT_eSPI ORIGINAL LIBRARY LICENSE:
vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvStartvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
Software License Agreement (FreeBSD License)

Copyright (c) 2020 Bodmer (https://github.com/Bodmer)

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

The views and conclusions contained in the software and documentation are those
of the authors and should not be interpreted as representing official policies,
either expressed or implied, of the FreeBSD Project.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^End^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

LovyanGFX ORIGINAL LIBRARY LICENSE:
vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvStartvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
Software License Agreement (FreeBSD License)

Copyright (c) 2020 lovyan03 (https://github.com/lovyan03)

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

The views and conclusions contained in the software and documentation are those
of the authors and should not be interpreted as representing official policies,
either expressed or implied, of the FreeBSD Project.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^End^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Copyright (c) 2013-2015 Steve Luken, www.linkedin.com/in/steveluken

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
if( ${CMAKE_VERSION} VERSION_GREATER "3.11.0" )
cmake_policy( SET CMP0077 NEW )
endif( ${CMAKE_VERSION} VERSION_GREATER "3.11.0" )
set_property(GLOBAL PROPERTY USE_FOLDERS On)
cmake_minimum_required(VERSION 3.20)

set(CMAKE_BUILD_TYPE "debug" CACHE STRING "Set build type")

set( CMAKE_BUILD_RPATH_USE_ORIGIN ON )
set( CMAKE_BUILD_WITH_INSTALL_RPATH ON )
set( CMAKE_INSTALL_RPATH_USE_LINK_PATH OFF )
set( CMAKE_SKIP_INSTALL_RPATH OFF )

if( NOT PROJECT_NAME )
project( Sack.all )
endif( NOT PROJECT_NAME )

# include this so default output paths get defined.
include( ${CMAKE_CURRENT_SOURCE_DIR}/../makefiles/cmake/DefaultInstall.cmake )

set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS
			${CMAKE_CONFIGURATION_TYPES} Debug Release RelWithDebInfo MinSizeRel )

include( ${CMAKE_CURRENT_LIST_DIR}/CMakeExtBuild.txt )

if( CMAKE_HOST_SYSTEM_NAME STREQUAL "Android" )
	DEFINE_DEFAULT( __ANDROID__ ON )
else( CMAKE_HOST_SYSTEM_NAME STREQUAL "Android")
	DEFINE_DEFAULT( __ANDROID__ OFF )
endif( CMAKE_HOST_SYSTEM_NAME STREQUAL "Android" )

if( NOT TARGET_INSTALL_PREFIX )
  SET(TARGET_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX} CACHE STRING  "Used to compile as installation path" )
endif( NOT TARGET_INSTALL_PREFIX )

if( __ANDROID__ )
   set( __NO_ODBC__ 1 )  # someday port unixodbc library?  But then the mysql driver needs to be ported
   set( __LINUX__ 1 )    # build as if it's linux
   DEFINE_DEFAULT( __ARM__ ON )
   set( D__ANDROID__ "-D__ANDROID__=${__ANDROID__} -DANDROID_DIR=${ANDROID_DIR} -DANDROID_NDK_VERSION=${ANDROID_NDK_VERSION}" )
   DEFINE_DEFAULT( BUILD_EXTRAS ON )
else( __ANDROID_ )
   DEFINE_DEFAULT( __ARM__ OFF )
   DEFINE_DEFAULT( BUILD_EXTRAS OFF )
endif( __ANDROID__ )

if( WIN32 OR __ANDROID__ )
DEFINE_DEFAULT( NEED_FREETYPE ON )
DEFINE_DEFAULT( NEED_JPEG ON )
DEFINE_DEFAULT( NEED_PNG ON )
DEFINE_DEFAULT( NEED_ZLIB ON )
DEFINE_DEFAULT( NEED_UUID OFF )
else( WIN32 OR __ANDROID__ )
DEFINE_DEFAULT( NEED_FREETYPE OFF )
DEFINE_DEFAULT( NEED_JPEG OFF )
DEFINE_DEFAULT( NEED_PNG OFF )
DEFINE_DEFAULT( NEED_ZLIB OFF )
set( __NO_ODBC__ 0 )  # someday port unixodbc library?  But then the mysql driver needs to be ported
set( __LINUX__ ON )
if(CMAKE_SIZEOF_VOID_P EQUAL 8)
  set( __LINUX64__ ON)
endif()
if( EXISTS /usr/include/uuid/uuid.h )
DEFINE_DEFAULT( NEED_UUID OFF )
else()
DEFINE_DEFAULT( NEED_UUID ON )
endif()
endif( WIN32 OR __ANDROID__ )

DEFINE_DEFAULT( BUILD_TESTS OFF )
DEFINE_DEFAULT( FORCE_MSVCRT  OFF )
DEFINE_DEFAULT( GENERATOR_BUILD_ALL_NOW  OFF )
DEFINE_DEFAULT( GENERATOR_BUILD_INSTALL_NOW  OFF )
DEFINE_DEFAULT( GENERATOR_BUILD_PACKAGE_NOW  OFF )
DEFINE_DEFAULT( DIRECTX_SDK "" )
DEFINE_DEFAULT( __CLR__ 0 )

IF(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
  if( CMAKE_BINARY_DIR MATCHES ${CMAKE_BUILD_TYPE}_solution\$ )
  SET(CMAKE_INSTALL_PREFIX
    ${CMAKE_BINARY_DIR}/../${CMAKE_BUILD_TYPE}_out CACHE PATH "Install default 'out' in this directory." FORCE
    )
    else()
  SET(CMAKE_INSTALL_PREFIX
    ${CMAKE_BINARY_DIR}/${CMAKE_BUILD_TYPE}_out CACHE PATH "Install default 'out' in this directory." FORCE
    )
  endif( CMAKE_BINARY_DIR MATCHES ${CMAKE_BUILD_TYPE}_solution\$ )
ENDIF(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
set( BULLET_SOURCE "${CMAKE_CURRENT_SOURCE_DIR}/../../bullet" CACHE STRING "bullet source path "  )
#OPTION( BULLET_SOURCE "bullet source path" "${CMAKE_CURRENT_SOURCE_DIR}/../../bullet/source" )
#OPTION( BUILD_MONOLITHIC "Build as one big library instead of parts" ${BUILD_MONOLITHIC} )
OPTION( BUILD_EXTRAS "Enable building extra projects (dekware, games, ... )" ${BUILD_EXTRAS} )
OPTION( BUILD_TESTS "Enable building test projects" ${BUILD_TESTS} )
OPTION( GENERATOR_BUILD_ALL_NOW "Enable building during the generate" ${GENERATOR_BUILD_ALL_NOW} )
OPTION( GENERATOR_BUILD_INSTALL_NOW "Enable building during the generate" ${GENERATOR_BUILD_INSTALL_NOW} )
OPTION( GENERATOR_BUILD_PACKAGE_NOW "Enable building installable packages (will mostly fail)" ${GENERATOR_BUILD_PACKAGE_NOW} )
OPTION( FORCE_MSVCRT "force using msvcrt instead of current version SDK libraries" ${FORCE_MSVCRT} )
#option( BUILD_UNICODE "Enable building everything as unicode" ${BUILD_UNICODE} )
option( __ANDROID__ "Enable target to android" ${__ANDROID__} )

if( DIRECTX_SDK )
# if directx had to be passed as an environment variable (has spaces)
# then it's already set, and don't have to pass it... otherwise we couldn't pass it.
  STRING( REPLACE "\\" "/" DDIRECTX_SDK -DDIRECTX_SDK=\"${DIRECTX_SDK}\" )
endif( DIRECTX_SDK )

if( BUILD_TESTS )
SET( DBUILD_TESTS -DBUILD_TESTS=${BUILD_TESTS} )
endif( BUILD_TESTS )

if( __CLR__ )
SET( D__CLR__ -D__CLR__=${__CLR__} )
endif( __CLR__ )

if( __LINUX__ )
SET( D__LINUX__ -D__LINUX__=${__LINUX__} )
endif( __LINUX__ )

if( __LINUX64__ )
SET( D__LINUX64__ -D__LINUX64__=${__LINUX64__} )
endif( __LINUX64__ )

if( __ARM__ )
SET( D__ARM__ -D__ARM__=${__ARM__} )
endif( __ARM__ )

if( FORCE_MSVCRT )
SET( DFORCE_MSVCRT -DFORCE_MSVCRT=${FORCE_MSVCRT} )
endif( FORCE_MSVCRT )


SET( SACK_REQUIREMENTS -DNEED_FREETYPE=${NEED_FREETYPE} -DNEED_JPEG=${NEED_JPEG} -DNEED_PNG=${NEED_PNG} -DNEED_ZLIB=${NEED_ZLIB} )
if( UNIX )
#message( "Not win32 (${WIN32}), UNIX(${UNIX}) but MINGW=\"${MINGW}\" maybe android? ; not passing need_externals" )
#set( SACK_REQUIREMENTS -DNEED_UUID=ON )
endif( UNIX )

IF(EXISTS ${BULLET_SOURCE}/CMakeLists.txt )
  if( WATCOM )
  else( WATCOM )
    set( BULLET_ENABLED ON )
    set( DBULLET_SOURCE -DBULLET_SOURCE=${BULLET_SOURCE} )
  endif( WATCOM )
endIF(EXISTS ${BULLET_SOURCE}/CMakeLists.txt )


set( PROJECT core )
set( EXTRA_FLAGS  -DBUILD_EXTRAS=${BUILD_EXTRAS}
			-D__NO_ODBC__=${__NO_ODBC__}
			\"-DTARGET_INSTALL_PREFIX=${TARGET_INSTALL_PREFIX}\"			
			${DDIRECTX_SDK}
        	        ${SACK_REQUIREMENTS} 
                	${DFORCE_MSVCRT} 
	                ${DBUILD_TESTS} 
                        ${DBULLET_SOURCE}
                        ${D__ARM__}
                        ${D__LINUX__}
                        ${D__LINUX64__}
                        ${D__ANDROID__}
                        ${D__CLR__}
                        ${DDX_SDK}
                )

set( PROJECT_BASE_PROJECT ${PROJECT} )
BuildProject( ${PROJECT} sack ${CMAKE_CURRENT_LIST_DIR}/.. SACK_SDK_ROOT_PATH ${EXTRA_FLAGS} )

set( EXTRA_FLAGS -DSACK_SDK_ROOT_PATH=${SACK_SDK_ROOT_PATH} )

#BuildProject( ${PROJECT}.framebuffer sack.nosolution ${CMAKE_CURRENT_LIST_DIR}/../not-exists UNUSED_SACK_SDK_ROOT_PATH ${EXTRA_FLAGS} )
#BuildProject( ${PROJECT}.puregl2 sack.nosolution ${CMAKE_CURRENT_LIST_DIR}/../not-exists UNUSED_SACK_SDK_ROOT_PATH ${EXTRA_FLAGS} )

if( NOT __ANDROID__ )
  # this calls sack_deploy to build cmakepackage
  # on android ended up making a cmake-configured-cmake-script to make this file.
#  Add_custom_command( TARGET Build${PROJECT} 
#	COMMAND ${SACK_SDK_ROOT_PATH}/${BINARY_OUTPUT_DIR}/sack_deploy${CMAKE_EXECUTABLE_SUFFIX} -nr
#	WORKING_DIRECTORY ${SACK_SDK_ROOT_PATH}
#  )                
endif( NOT __ANDROID__ )

if( NOT __CLR__ )
set( PROJECT binary )
set( EXTRA_FLAGS  -DSACK_SDK_ROOT_PATH=${SACK_SDK_ROOT_PATH} ${D__ANDROID__} )
BuildProject( ${PROJECT} sack.binaries ${CMAKE_CURRENT_LIST_DIR}/../binary SACK_BINARY_SDK_ROOT_PATH ${EXTRA_FLAGS} )
add_dependencies( ${LAST_TARGET} ${PROJECT_BASE_PROJECT} )
else( NOT __CLR__ )
message( "Disabled Binaries output for CLR build" )
endif( NOT __CLR__ )


set( PROJECT intershell )
set( EXTRA_FLAGS  -DSACK_SDK_ROOT_PATH=${SACK_SDK_ROOT_PATH} ${D__ANDROID__} )
BuildProject( ${PROJECT} ${PROJECT} ${CMAKE_CURRENT_LIST_DIR}/../src/InterShell.stable INTERSHELL_SDK_ROOT_PATH ${EXTRA_FLAGS} )
add_dependencies( ${LAST_TARGET} ${PROJECT_BASE_PROJECT} binary )

if( NOT __LINUX__ AND NOT __ANDROID__ )
  set( PROJECT intershell_Package )
  set( EXTRA_FLAGS  -DSACK_SDK_ROOT_PATH=${SACK_SDK_ROOT_PATH} ${D__ANDROID__} )
  BuildProject( ${PROJECT} Intershell.Package ${CMAKE_CURRENT_LIST_DIR}/../src/InterShell.stable/package INTERSHELL_PACKAGE_ROOT_PATH ${EXTRA_FLAGS} -DINTERSHELL_SDK_ROOT_PATH=${INTERSHELL_SDK_ROOT_PATH} )
  add_dependencies( ${LAST_TARGET} ${PROJECT_BASE_PROJECT} intershell )
endif( NOT __LINUX__ AND NOT __ANDROID__ )


#set( PROJECT intershell2 )
#set( EXTRA_FLAGS  -DSACK_SDK_ROOT_PATH=${SACK_SDK_ROOT_PATH} ${D__ANDROID__} )
#BuildProject( ${PROJECT} ${PROJECT} ${CMAKE_CURRENT_LIST_DIR}/../src/InterShell INTERSHELL2_SDK_ROOT_PATH ${EXTRA_FLAGS} )
#add_dependencies( ${LAST_TARGET} ${PROJECT_BASE_PROJECT} binary )

if( NOT __ANDROID__ )
  set( PROJECT mercurial_version_tagger )
  set( EXTRA_FLAGS  -DSACK_SDK_ROOT_PATH=${SACK_SDK_ROOT_PATH} ${D__ANDROID__} )
  BuildProject( ${PROJECT} ${PROJECT} ${CMAKE_CURRENT_LIST_DIR}/../src/utils/mercurial_version_tagger MERCURIAL_TAGGER_ROOT_PATH ${EXTRA_FLAGS} )
  add_dependencies( ${LAST_TARGET} ${PROJECT_BASE_PROJECT} )
endif( NOT __ANDROID__ )

IF( BULLET_ENABLED )
  message( "Congratz, you get Bullet projects" )
  if( NOT __ANDROID__ )
    set( PROJECT ball_mixer1 )
    set( EXTRA_FLAGS_MIXER  -DSACK_SDK_ROOT_PATH=${SACK_SDK_ROOT_PATH} -DSACK_BINARY_SDK_ROOT_PATH=${SACK_BINARY_SDK_ROOT_PATH} -DINTERSHELL_SDK_ROOT_PATH=${INTERSHELL_SDK_ROOT_PATH} ${D__ANDROID__} )
    BuildProject( ${PROJECT} ${PROJECT} ${CMAKE_CURRENT_LIST_DIR}/../src/games/ball_mixer INSTALL ${EXTRA_FLAGS_MIXER} )
    add_dependencies( ${LAST_TARGET} ${PROJECT_BASE_PROJECT} binary intershell )
  endif( NOT __ANDROID__ )

  set( PROJECT ball_mixer2 )
  set( EXTRA_FLAGS_MIXER  -DSACK_SDK_ROOT_PATH=${SACK_SDK_ROOT_PATH} -DSACK_BINARY_SDK_ROOT_PATH=${SACK_BINARY_SDK_ROOT_PATH} -DINTERSHELL_SDK_ROOT_PATH=${INTERSHELL_SDK_ROOT_PATH} ${D__ANDROID__} )
  BuildProject( ${PROJECT} ${PROJECT} ${CMAKE_CURRENT_LIST_DIR}/../src/games/ball_mixer2 INSTALL ${EXTRA_FLAGS_MIXER} )
  add_dependencies( ${LAST_TARGET} ${PROJECT_BASE_PROJECT} binary intershell )

ENDIF( BULLET_ENABLED )

if( BUILD_EXTRAS )
  include( ${CMAKE_CURRENT_LIST_DIR}/CMakeLists.extras.txt )
endif( BUILD_EXTRAS )
DEX UI is a handcrafted interface programmed in openFrameworks, running fullscreen underneath a functioning terminal, giving the experience of having a sci fi computer. More.
The project's source code is hosted here for reference. Included are the openFrameworks project source files and shaders, as well as the changes I made to BSPWM (more below). Not included are things like fonts and images.
Note: Dex UI was designed as an experiment or an art piece, not distributable software, so as a result, the code (though I've cleaned it up some) is not the easiest to sort through. Also, because it is no longer in development, I won't be trying to make this work on other people machines - that part's up to you.
What's Happening in the Video Demo
Real desktops revolve around windows, but most sci fi interfaces have these integrated desktops with all sort of animations and no apparent windows. Dex UI aimed to create the illusion of a desktop environment without windows while in reality still operating with windows (in X Windowing System).
To do this, the interface is a single openFrameworks program that handles all the animations. By modifying BSPWM I added a window mode to allow the interface to sit fullscreen beneath any other window. After the introduction animation occurs, a terminal (URXVT) is created above the interface and its size is constrained to the outline drawn in the interface. In short it is two layered windows, but because the windows have no borders or shadows, visually this looks like one integrated interface.
How do I run Dex UI
The code here is for an openFrameworks project. The first step is to get openFrameworks, and get the graphics examples running to confirm it's really working. Then you can start a new project and add the files. Beyond that, fonts and images are not included here, which may be problematic as all of the type work is hard coded.
How I contribute?
This project is here for reference and not in active development, so it is very unlikely I will continue to make changes, or respond to requests to make changes.
Why openFrameworks?
I needed something capable of creating lots of dynamic animations. This could be Processing, pure OpenGL, openFrameworks, etc. Originally my prototypes were in Processing, but for performance reasons I switched to openFrameworks. From what I've learned, many movie interfaces are put together in AfterEffects, so if you wanted to create an interface that did not respond to input, this is also an option.
BSPWM?
BSPWM was what I was working with, but it took some effort to make a window persistently stay fullscreen. The choice of window manager isn't a huge deal, just find something to make the illusion work.
I've also included a .diff file with the changes (to BSPWM commit c49bc92) I made to BSPWM to add what I (for no reason) named power mode. A window can be set to power mode making it stay fullscreen, beneath all other windows across multiple desktops. I've been told a similar effect can be achieved with wmutils, and this might be an easier route.
Font?
Inside the terminal we have Fira Mono, and the rest is United Sans Medium.
Is this working with real data
The keyboard contains some code to work using /dev/input, but the rest still needs to be hooked up to system data. Luckily this is straightforward and only requires replacing the generated data with sampled data.
Why the onscreen Keyboard, does it work with touch screens?
It's there because I think it looks cool. While it doesn't work with touch screens, it might be possible by making the project respond to mouse/touch input.
FlashDB is an ultra-lightweight embedded database that focuses on providing data storage solutions for embedded products. Different from traditional database based on file system, FlashDB combines the features of Flash and has strong performance and reliability. And under the premise of ensuring extremely low resource occupation, the service life of Flash should be extended as much as possible.
Nowadays, there are more and more types of IoT products, and the types and total amount of data generated during operation are also increasing. FlashDB provides a variety of data storage solutions, not only has a small resource footprint, but also has a large storage capacity, which is very suitable for IoT products. The following are the main application scenarios
BLDC motors are entering the hobby community more and more and many great projects have already emerged leveraging their far superior dynamics and power capabilities. BLDC motors have numerous advantages over regular DC motors but they have one big disadvantage, the complexity of control. Even though it has become relatively easy to design and manufacture PCBs and create our own hardware solutions for driving BLDC motors the proper low-cost solutions are yet to come. One of the reasons for this is the apparent complexity of writing the BLDC driving algorithms, Field oriented control (FOC) being an example of one of the most efficient ones. The solutions that can be found on-line are almost exclusively very specific for certain hardware configuration and the microcontroller architecture used. Additionally, most of the efforts at this moment are still channeled towards the high-power applications of the BLDC motors and proper low-cost and low-power FOC supporting boards are very hard to find today and even may not exist.
Please do not hesitate to leave an issue if you have problems/advices/suggestions regarding the code!
Pull requests are welcome, but let's first discuss them in community forum!
If you'd like to contribute to this project but you are not very familiar with github, don't worry, let us know either by posting at the community forum , by posting a github issue or at our discord server.
If you are familiar, we accept pull requests to the dev branch!
For all the questions regarding the potential implementation, applications, supported hardware and similar please visit our community forum or our discord server.
It is always helpful to hear the stories/problems/suggestions of people implementing the code and you might find a lot of answered questions there already!
We are very happy that SimpleFOClibrary has been used as a component of several research project and has made its way to several scientific papers. We are hoping that this trend is going to continue as the project matures and becomes more robust! A short resume paper about SimpleFOC has been published in the Journal of Open Source Software:
SimpleFOC: A Field Oriented Control (FOC) Library for Controlling Brushless Direct Current (BLDC) and Stepper Motors.
A. Skuric, HS. Bank, R. Unger, O. Williams, D. González-Reyes
Journal of Open Source Software, 7(74), 4232, https://doi.org/10.21105/joss.04232
If you are interested in citing SimpleFOClibrary or some other component of SimpleFOCproject in your research, we suggest you to cite our paper
These are the GNU core utilities.  This package is the union of
the GNU fileutils, sh-utils, and textutils packages.
Most of these programs have significant advantages over their Unix
counterparts, such as greater speed, additional options, and fewer
arbitrary limits.

The programs that can be built with this package are:

  [ arch b2sum base32 base64 basename basenc cat chcon chgrp chmod chown
  chroot cksum comm coreutils cp csplit cut date dd df dir dircolors dirname
  du echo env expand expr factor false fmt fold groups head hostid hostname
  id install join kill link ln logname ls md5sum mkdir mkfifo mknod mktemp
  mv nice nl nohup nproc numfmt od paste pathchk pinky pr printenv printf ptx
  pwd readlink realpath rm rmdir runcon seq sha1sum sha224sum sha256sum
  sha384sum sha512sum shred shuf sleep sort split stat stdbuf stty sum sync
  tac tail tee test timeout touch tr true truncate tsort tty uname unexpand
  uniq unlink uptime users vdir wc who whoami yes

See the file NEWS for a list of major changes in the current release.

If you obtained this file as part of a "git clone", then see the
README-hacking file.  If this file came to you as part of a tar archive,
then see the file INSTALL for general compilation and installation
instructions, or README-install for system and coreutils specific instructions.

Like the rest of the GNU system, these programs mostly conform to
POSIX, with BSD and other extensions.  For closer conformance, or
conformance to a particular POSIX version, set the POSIXLY_CORRECT
and the _POSIX2_VERSION environment variables, as described in
the documentation under "Standards conformance".

The ls, dir, and vdir commands are all separate executables instead of
one program that checks argv[0] because people often rename these
programs to things like gls, gnuls, l, etc.  Renaming a program
file shouldn't affect how it operates, so that people can get the
behavior they want with whatever name they want.

Special thanks to Paul Eggert, Brian Matthews, Bruce Evans, Karl Berry,
Kaveh Ghazi, and François Pinard for help with debugging and porting
these programs.  Many thanks to all of the people who have taken the
time to submit problem reports and fixes.  All contributed changes are
attributed in the commit logs.

And thanks to the following people who have provided accounts for
portability testing on many different types of systems: Bob Proulx,
Christian Robert, François Pinard, Greg McGary, Harlan Stenn,
Joel N. Weber, Mark D. Roth, Matt Schalit, Nelson H. F. Beebe,
Réjean Payette, Sam Tardieu.

Thanks to Michael Stone for inflicting test releases of this package
on Debian's unstable distribution, and to all the kind folks who used
that distribution and found and reported bugs.

Note that each man page is now automatically generated from a template
and from the corresponding --help usage message.  Patches to the template
files (man/*.x) are welcome.  However, the authoritative documentation
is in texinfo form in the doc directory.


***************
Feature requests:
---------------

If you would like to add a new feature, please try to get some sort of
consensus that it is a worthwhile change.  One way to do that is to send
mail to coreutils@gnu.org including as much description and justification
as you can.  Based on the feedback that generates, you may be able to
convince us that it's worth adding.  Please also consult the list of
previously discussed but ultimately rejected feature requests at:
https://www.gnu.org/software/coreutils/rejected_requests.html


***************
Reporting bugs:
---------------

Send bug reports, questions, comments, etc. to bug-coreutils@gnu.org.
To suggest a patch, see the files README-hacking and HACKING for tips.

All of these programs except 'test' recognize the '--version' option.
When reporting bugs, please include in the subject line both the package
name/version and the name of the program for which you found a problem.

If you have a problem with 'sort', try running 'sort --debug', as it
can often help find and fix problems without having to wait for an
answer to a bug report.  If the debug output does not suffice to fix
the problem on your own, please compress and attach it to the rest of
your bug report.

IMPORTANT: if you take the time to report a test failure,
please be sure to include the output of running 'make check'
in verbose mode for each failing test.  For example,
if the test that fails is tests/df/df-P.sh, then you would
run this command:

  make check TESTS=tests/df/df-P.sh VERBOSE=yes SUBDIRS=. >> log 2>&1

For some tests, particularly perl tests, you can get even more detail by adding
DEBUG=yes. Then include the contents of the file 'log' in your bug report.


***************************************

There are many tests, but nowhere near as many as we need.
Additions and corrections are very welcome.

If you see a problem that you've already reported, feel free to re-report
it -- it won't bother us to get a reminder.  Besides, the more messages we
get regarding a particular problem the sooner it'll be fixed -- usually.
If you sent a complete patch and, after a couple weeks you haven't
received any acknowledgement, please ping us.  A complete patch includes
a well-written ChangeLog entry, unified (diff -u format) diffs relative
to the most recent test release (or, better, relative to the latest
sources in the public repository), an explanation for why the patch is
necessary or useful, and if at all possible, enough information to
reproduce whatever problem prompted it.  Plus, you'll earn lots of
karma if you include a test case to exercise any bug(s) you fix.
Here are instructions for checking out the latest development sources:

  https://savannah.gnu.org/git/?group=coreutils

For general documentation on the coding and usage standards
this distribution follows, see the GNU Coding Standards at:
https://www.gnu.org/prep/standards/

For any copyright year range specified as YYYY-ZZZZ in this package
note that the range specifies every single year in that closed interval.

Please see the file COPYING for copying conditions.

========================================================================

Copyright (C) 1998-2024 Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
Texts.  A copy of the license is included in the "GNU Free
Documentation License" file as part of this distribution.

Adafruit_ILI9341 ORIGINAL LIBRARY HEADER:
vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvStartvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
  This is our library for the Adafruit  ILI9341 Breakout and Shield
  ----> http://www.adafruit.com/products/1651

  Check out the links above for our tutorials and wiring diagrams
  These displays use SPI to communicate, 4 or 5 pins are required to
  interface (RST is optional)
  Adafruit invests time and resources providing this open source code,
  please support Adafruit and open-source hardware by purchasing
  products from Adafruit!

  Written by Limor Fried/Ladyada for Adafruit Industries.
  MIT license, all text above must be included in any redistribution
  
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^End^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Adafruit_GFX ORIGINAL LIBRARY LICENSE:
vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvStartvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

Software License Agreement (BSD License)

Copyright (c) 2012 Adafruit Industries.  All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

- Redistributions of source code must retain the above copyright notice,
  this list of conditions and the following disclaimer.
- Redistributions in binary form must reproduce the above copyright notice,
  this list of conditions and the following disclaimer in the documentation
  and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^End^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

TFT_eSPI ORIGINAL LIBRARY LICENSE:
vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvStartvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
Software License Agreement (FreeBSD License)

Copyright (c) 2020 Bodmer (https://github.com/Bodmer)

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

The views and conclusions contained in the software and documentation are those
of the authors and should not be interpreted as representing official policies,
either expressed or implied, of the FreeBSD Project.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^End^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

LovyanGFX ORIGINAL LIBRARY LICENSE:
vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvStartvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
Software License Agreement (FreeBSD License)

Copyright (c) 2020 lovyan03 (https://github.com/lovyan03)

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

The views and conclusions contained in the software and documentation are those
of the authors and should not be interpreted as representing official policies,
either expressed or implied, of the FreeBSD Project.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^End^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Copyright (c) 2013-2015 Steve Luken, www.linkedin.com/in/steveluken

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
if( ${CMAKE_VERSION} VERSION_GREATER "3.11.0" )
cmake_policy( SET CMP0077 NEW )
endif( ${CMAKE_VERSION} VERSION_GREATER "3.11.0" )
set_property(GLOBAL PROPERTY USE_FOLDERS On)
cmake_minimum_required(VERSION 3.20)

set(CMAKE_BUILD_TYPE "debug" CACHE STRING "Set build type")

set( CMAKE_BUILD_RPATH_USE_ORIGIN ON )
set( CMAKE_BUILD_WITH_INSTALL_RPATH ON )
set( CMAKE_INSTALL_RPATH_USE_LINK_PATH OFF )
set( CMAKE_SKIP_INSTALL_RPATH OFF )

if( NOT PROJECT_NAME )
project( Sack.all )
endif( NOT PROJECT_NAME )

# include this so default output paths get defined.
include( ${CMAKE_CURRENT_SOURCE_DIR}/../makefiles/cmake/DefaultInstall.cmake )

set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS
			${CMAKE_CONFIGURATION_TYPES} Debug Release RelWithDebInfo MinSizeRel )

include( ${CMAKE_CURRENT_LIST_DIR}/CMakeExtBuild.txt )

if( CMAKE_HOST_SYSTEM_NAME STREQUAL "Android" )
	DEFINE_DEFAULT( __ANDROID__ ON )
else( CMAKE_HOST_SYSTEM_NAME STREQUAL "Android")
	DEFINE_DEFAULT( __ANDROID__ OFF )
endif( CMAKE_HOST_SYSTEM_NAME STREQUAL "Android" )

if( NOT TARGET_INSTALL_PREFIX )
  SET(TARGET_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX} CACHE STRING  "Used to compile as installation path" )
endif( NOT TARGET_INSTALL_PREFIX )

if( __ANDROID__ )
   set( __NO_ODBC__ 1 )  # someday port unixodbc library?  But then the mysql driver needs to be ported
   set( __LINUX__ 1 )    # build as if it's linux
   DEFINE_DEFAULT( __ARM__ ON )
   set( D__ANDROID__ "-D__ANDROID__=${__ANDROID__} -DANDROID_DIR=${ANDROID_DIR} -DANDROID_NDK_VERSION=${ANDROID_NDK_VERSION}" )
   DEFINE_DEFAULT( BUILD_EXTRAS ON )
else( __ANDROID_ )
   DEFINE_DEFAULT( __ARM__ OFF )
   DEFINE_DEFAULT( BUILD_EXTRAS OFF )
endif( __ANDROID__ )

if( WIN32 OR __ANDROID__ )
DEFINE_DEFAULT( NEED_FREETYPE ON )
DEFINE_DEFAULT( NEED_JPEG ON )
DEFINE_DEFAULT( NEED_PNG ON )
DEFINE_DEFAULT( NEED_ZLIB ON )
DEFINE_DEFAULT( NEED_UUID OFF )
else( WIN32 OR __ANDROID__ )
DEFINE_DEFAULT( NEED_FREETYPE OFF )
DEFINE_DEFAULT( NEED_JPEG OFF )
DEFINE_DEFAULT( NEED_PNG OFF )
DEFINE_DEFAULT( NEED_ZLIB OFF )
set( __NO_ODBC__ 0 )  # someday port unixodbc library?  But then the mysql driver needs to be ported
set( __LINUX__ ON )
if(CMAKE_SIZEOF_VOID_P EQUAL 8)
  set( __LINUX64__ ON)
endif()
if( EXISTS /usr/include/uuid/uuid.h )
DEFINE_DEFAULT( NEED_UUID OFF )
else()
DEFINE_DEFAULT( NEED_UUID ON )
endif()
endif( WIN32 OR __ANDROID__ )

DEFINE_DEFAULT( BUILD_TESTS OFF )
DEFINE_DEFAULT( FORCE_MSVCRT  OFF )
DEFINE_DEFAULT( GENERATOR_BUILD_ALL_NOW  OFF )
DEFINE_DEFAULT( GENERATOR_BUILD_INSTALL_NOW  OFF )
DEFINE_DEFAULT( GENERATOR_BUILD_PACKAGE_NOW  OFF )
DEFINE_DEFAULT( DIRECTX_SDK "" )
DEFINE_DEFAULT( __CLR__ 0 )

IF(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
  if( CMAKE_BINARY_DIR MATCHES ${CMAKE_BUILD_TYPE}_solution\$ )
  SET(CMAKE_INSTALL_PREFIX
    ${CMAKE_BINARY_DIR}/../${CMAKE_BUILD_TYPE}_out CACHE PATH "Install default 'out' in this directory." FORCE
    )
    else()
  SET(CMAKE_INSTALL_PREFIX
    ${CMAKE_BINARY_DIR}/${CMAKE_BUILD_TYPE}_out CACHE PATH "Install default 'out' in this directory." FORCE
    )
  endif( CMAKE_BINARY_DIR MATCHES ${CMAKE_BUILD_TYPE}_solution\$ )
ENDIF(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
set( BULLET_SOURCE "${CMAKE_CURRENT_SOURCE_DIR}/../../bullet" CACHE STRING "bullet source path "  )
#OPTION( BULLET_SOURCE "bullet source path" "${CMAKE_CURRENT_SOURCE_DIR}/../../bullet/source" )
#OPTION( BUILD_MONOLITHIC "Build as one big library instead of parts" ${BUILD_MONOLITHIC} )
OPTION( BUILD_EXTRAS "Enable building extra projects (dekware, games, ... )" ${BUILD_EXTRAS} )
OPTION( BUILD_TESTS "Enable building test projects" ${BUILD_TESTS} )
OPTION( GENERATOR_BUILD_ALL_NOW "Enable building during the generate" ${GENERATOR_BUILD_ALL_NOW} )
OPTION( GENERATOR_BUILD_INSTALL_NOW "Enable building during the generate" ${GENERATOR_BUILD_INSTALL_NOW} )
OPTION( GENERATOR_BUILD_PACKAGE_NOW "Enable building installable packages (will mostly fail)" ${GENERATOR_BUILD_PACKAGE_NOW} )
OPTION( FORCE_MSVCRT "force using msvcrt instead of current version SDK libraries" ${FORCE_MSVCRT} )
#option( BUILD_UNICODE "Enable building everything as unicode" ${BUILD_UNICODE} )
option( __ANDROID__ "Enable target to android" ${__ANDROID__} )

if( DIRECTX_SDK )
# if directx had to be passed as an environment variable (has spaces)
# then it's already set, and don't have to pass it... otherwise we couldn't pass it.
  STRING( REPLACE "\\" "/" DDIRECTX_SDK -DDIRECTX_SDK=\"${DIRECTX_SDK}\" )
endif( DIRECTX_SDK )

if( BUILD_TESTS )
SET( DBUILD_TESTS -DBUILD_TESTS=${BUILD_TESTS} )
endif( BUILD_TESTS )

if( __CLR__ )
SET( D__CLR__ -D__CLR__=${__CLR__} )
endif( __CLR__ )

if( __LINUX__ )
SET( D__LINUX__ -D__LINUX__=${__LINUX__} )
endif( __LINUX__ )

if( __LINUX64__ )
SET( D__LINUX64__ -D__LINUX64__=${__LINUX64__} )
endif( __LINUX64__ )

if( __ARM__ )
SET( D__ARM__ -D__ARM__=${__ARM__} )
endif( __ARM__ )

if( FORCE_MSVCRT )
SET( DFORCE_MSVCRT -DFORCE_MSVCRT=${FORCE_MSVCRT} )
endif( FORCE_MSVCRT )


SET( SACK_REQUIREMENTS -DNEED_FREETYPE=${NEED_FREETYPE} -DNEED_JPEG=${NEED_JPEG} -DNEED_PNG=${NEED_PNG} -DNEED_ZLIB=${NEED_ZLIB} )
if( UNIX )
#message( "Not win32 (${WIN32}), UNIX(${UNIX}) but MINGW=\"${MINGW}\" maybe android? ; not passing need_externals" )
#set( SACK_REQUIREMENTS -DNEED_UUID=ON )
endif( UNIX )

IF(EXISTS ${BULLET_SOURCE}/CMakeLists.txt )
  if( WATCOM )
  else( WATCOM )
    set( BULLET_ENABLED ON )
    set( DBULLET_SOURCE -DBULLET_SOURCE=${BULLET_SOURCE} )
  endif( WATCOM )
endIF(EXISTS ${BULLET_SOURCE}/CMakeLists.txt )


set( PROJECT core )
set( EXTRA_FLAGS  -DBUILD_EXTRAS=${BUILD_EXTRAS}
			-D__NO_ODBC__=${__NO_ODBC__}
			\"-DTARGET_INSTALL_PREFIX=${TARGET_INSTALL_PREFIX}\"			
			${DDIRECTX_SDK}
        	        ${SACK_REQUIREMENTS} 
                	${DFORCE_MSVCRT} 
	                ${DBUILD_TESTS} 
                        ${DBULLET_SOURCE}
                        ${D__ARM__}
                        ${D__LINUX__}
                        ${D__LINUX64__}
                        ${D__ANDROID__}
                        ${D__CLR__}
                        ${DDX_SDK}
                )

set( PROJECT_BASE_PROJECT ${PROJECT} )
BuildProject( ${PROJECT} sack ${CMAKE_CURRENT_LIST_DIR}/.. SACK_SDK_ROOT_PATH ${EXTRA_FLAGS} )

set( EXTRA_FLAGS -DSACK_SDK_ROOT_PATH=${SACK_SDK_ROOT_PATH} )

#BuildProject( ${PROJECT}.framebuffer sack.nosolution ${CMAKE_CURRENT_LIST_DIR}/../not-exists UNUSED_SACK_SDK_ROOT_PATH ${EXTRA_FLAGS} )
#BuildProject( ${PROJECT}.puregl2 sack.nosolution ${CMAKE_CURRENT_LIST_DIR}/../not-exists UNUSED_SACK_SDK_ROOT_PATH ${EXTRA_FLAGS} )

if( NOT __ANDROID__ )
  # this calls sack_deploy to build cmakepackage
  # on android ended up making a cmake-configured-cmake-script to make this file.
#  Add_custom_command( TARGET Build${PROJECT} 
#	COMMAND ${SACK_SDK_ROOT_PATH}/${BINARY_OUTPUT_DIR}/sack_deploy${CMAKE_EXECUTABLE_SUFFIX} -nr
#	WORKING_DIRECTORY ${SACK_SDK_ROOT_PATH}
#  )                
endif( NOT __ANDROID__ )

if( NOT __CLR__ )
set( PROJECT binary )
set( EXTRA_FLAGS  -DSACK_SDK_ROOT_PATH=${SACK_SDK_ROOT_PATH} ${D__ANDROID__} )
BuildProject( ${PROJECT} sack.binaries ${CMAKE_CURRENT_LIST_DIR}/../binary SACK_BINARY_SDK_ROOT_PATH ${EXTRA_FLAGS} )
add_dependencies( ${LAST_TARGET} ${PROJECT_BASE_PROJECT} )
else( NOT __CLR__ )
message( "Disabled Binaries output for CLR build" )
endif( NOT __CLR__ )


set( PROJECT intershell )
set( EXTRA_FLAGS  -DSACK_SDK_ROOT_PATH=${SACK_SDK_ROOT_PATH} ${D__ANDROID__} )
BuildProject( ${PROJECT} ${PROJECT} ${CMAKE_CURRENT_LIST_DIR}/../src/InterShell.stable INTERSHELL_SDK_ROOT_PATH ${EXTRA_FLAGS} )
add_dependencies( ${LAST_TARGET} ${PROJECT_BASE_PROJECT} binary )

if( NOT __LINUX__ AND NOT __ANDROID__ )
  set( PROJECT intershell_Package )
  set( EXTRA_FLAGS  -DSACK_SDK_ROOT_PATH=${SACK_SDK_ROOT_PATH} ${D__ANDROID__} )
  BuildProject( ${PROJECT} Intershell.Package ${CMAKE_CURRENT_LIST_DIR}/../src/InterShell.stable/package INTERSHELL_PACKAGE_ROOT_PATH ${EXTRA_FLAGS} -DINTERSHELL_SDK_ROOT_PATH=${INTERSHELL_SDK_ROOT_PATH} )
  add_dependencies( ${LAST_TARGET} ${PROJECT_BASE_PROJECT} intershell )
endif( NOT __LINUX__ AND NOT __ANDROID__ )


#set( PROJECT intershell2 )
#set( EXTRA_FLAGS  -DSACK_SDK_ROOT_PATH=${SACK_SDK_ROOT_PATH} ${D__ANDROID__} )
#BuildProject( ${PROJECT} ${PROJECT} ${CMAKE_CURRENT_LIST_DIR}/../src/InterShell INTERSHELL2_SDK_ROOT_PATH ${EXTRA_FLAGS} )
#add_dependencies( ${LAST_TARGET} ${PROJECT_BASE_PROJECT} binary )

if( NOT __ANDROID__ )
  set( PROJECT mercurial_version_tagger )
  set( EXTRA_FLAGS  -DSACK_SDK_ROOT_PATH=${SACK_SDK_ROOT_PATH} ${D__ANDROID__} )
  BuildProject( ${PROJECT} ${PROJECT} ${CMAKE_CURRENT_LIST_DIR}/../src/utils/mercurial_version_tagger MERCURIAL_TAGGER_ROOT_PATH ${EXTRA_FLAGS} )
  add_dependencies( ${LAST_TARGET} ${PROJECT_BASE_PROJECT} )
endif( NOT __ANDROID__ )

IF( BULLET_ENABLED )
  message( "Congratz, you get Bullet projects" )
  if( NOT __ANDROID__ )
    set( PROJECT ball_mixer1 )
    set( EXTRA_FLAGS_MIXER  -DSACK_SDK_ROOT_PATH=${SACK_SDK_ROOT_PATH} -DSACK_BINARY_SDK_ROOT_PATH=${SACK_BINARY_SDK_ROOT_PATH} -DINTERSHELL_SDK_ROOT_PATH=${INTERSHELL_SDK_ROOT_PATH} ${D__ANDROID__} )
    BuildProject( ${PROJECT} ${PROJECT} ${CMAKE_CURRENT_LIST_DIR}/../src/games/ball_mixer INSTALL ${EXTRA_FLAGS_MIXER} )
    add_dependencies( ${LAST_TARGET} ${PROJECT_BASE_PROJECT} binary intershell )
  endif( NOT __ANDROID__ )

  set( PROJECT ball_mixer2 )
  set( EXTRA_FLAGS_MIXER  -DSACK_SDK_ROOT_PATH=${SACK_SDK_ROOT_PATH} -DSACK_BINARY_SDK_ROOT_PATH=${SACK_BINARY_SDK_ROOT_PATH} -DINTERSHELL_SDK_ROOT_PATH=${INTERSHELL_SDK_ROOT_PATH} ${D__ANDROID__} )
  BuildProject( ${PROJECT} ${PROJECT} ${CMAKE_CURRENT_LIST_DIR}/../src/games/ball_mixer2 INSTALL ${EXTRA_FLAGS_MIXER} )
  add_dependencies( ${LAST_TARGET} ${PROJECT_BASE_PROJECT} binary intershell )

ENDIF( BULLET_ENABLED )

if( BUILD_EXTRAS )
  include( ${CMAKE_CURRENT_LIST_DIR}/CMakeLists.extras.txt )
endif( BUILD_EXTRAS )
DEX UI is a handcrafted interface programmed in openFrameworks, running fullscreen underneath a functioning terminal, giving the experience of having a sci fi computer. More.
The project's source code is hosted here for reference. Included are the openFrameworks project source files and shaders, as well as the changes I made to BSPWM (more below). Not included are things like fonts and images.
Note: Dex UI was designed as an experiment or an art piece, not distributable software, so as a result, the code (though I've cleaned it up some) is not the easiest to sort through. Also, because it is no longer in development, I won't be trying to make this work on other people machines - that part's up to you.
What's Happening in the Video Demo
Real desktops revolve around windows, but most sci fi interfaces have these integrated desktops with all sort of animations and no apparent windows. Dex UI aimed to create the illusion of a desktop environment without windows while in reality still operating with windows (in X Windowing System).
To do this, the interface is a single openFrameworks program that handles all the animations. By modifying BSPWM I added a window mode to allow the interface to sit fullscreen beneath any other window. After the introduction animation occurs, a terminal (URXVT) is created above the interface and its size is constrained to the outline drawn in the interface. In short it is two layered windows, but because the windows have no borders or shadows, visually this looks like one integrated interface.
How do I run Dex UI
The code here is for an openFrameworks project. The first step is to get openFrameworks, and get the graphics examples running to confirm it's really working. Then you can start a new project and add the files. Beyond that, fonts and images are not included here, which may be problematic as all of the type work is hard coded.
How I contribute?
This project is here for reference and not in active development, so it is very unlikely I will continue to make changes, or respond to requests to make changes.
Why openFrameworks?
I needed something capable of creating lots of dynamic animations. This could be Processing, pure OpenGL, openFrameworks, etc. Originally my prototypes were in Processing, but for performance reasons I switched to openFrameworks. From what I've learned, many movie interfaces are put together in AfterEffects, so if you wanted to create an interface that did not respond to input, this is also an option.
BSPWM?
BSPWM was what I was working with, but it took some effort to make a window persistently stay fullscreen. The choice of window manager isn't a huge deal, just find something to make the illusion work.
I've also included a .diff file with the changes (to BSPWM commit c49bc92) I made to BSPWM to add what I (for no reason) named power mode. A window can be set to power mode making it stay fullscreen, beneath all other windows across multiple desktops. I've been told a similar effect can be achieved with wmutils, and this might be an easier route.
Font?
Inside the terminal we have Fira Mono, and the rest is United Sans Medium.
Is this working with real data
The keyboard contains some code to work using /dev/input, but the rest still needs to be hooked up to system data. Luckily this is straightforward and only requires replacing the generated data with sampled data.
Why the onscreen Keyboard, does it work with touch screens?
It's there because I think it looks cool. While it doesn't work with touch screens, it might be possible by making the project respond to mouse/touch input.
FlashDB is an ultra-lightweight embedded database that focuses on providing data storage solutions for embedded products. Different from traditional database based on file system, FlashDB combines the features of Flash and has strong performance and reliability. And under the premise of ensuring extremely low resource occupation, the service life of Flash should be extended as much as possible.
Nowadays, there are more and more types of IoT products, and the types and total amount of data generated during operation are also increasing. FlashDB provides a variety of data storage solutions, not only has a small resource footprint, but also has a large storage capacity, which is very suitable for IoT products. The following are the main application scenarios
BLDC motors are entering the hobby community more and more and many great projects have already emerged leveraging their far superior dynamics and power capabilities. BLDC motors have numerous advantages over regular DC motors but they have one big disadvantage, the complexity of control. Even though it has become relatively easy to design and manufacture PCBs and create our own hardware solutions for driving BLDC motors the proper low-cost solutions are yet to come. One of the reasons for this is the apparent complexity of writing the BLDC driving algorithms, Field oriented control (FOC) being an example of one of the most efficient ones. The solutions that can be found on-line are almost exclusively very specific for certain hardware configuration and the microcontroller architecture used. Additionally, most of the efforts at this moment are still channeled towards the high-power applications of the BLDC motors and proper low-cost and low-power FOC supporting boards are very hard to find today and even may not exist.
Please do not hesitate to leave an issue if you have problems/advices/suggestions regarding the code!
Pull requests are welcome, but let's first discuss them in community forum!
If you'd like to contribute to this project but you are not very familiar with github, don't worry, let us know either by posting at the community forum , by posting a github issue or at our discord server.
If you are familiar, we accept pull requests to the dev branch!
For all the questions regarding the potential implementation, applications, supported hardware and similar please visit our community forum or our discord server.
It is always helpful to hear the stories/problems/suggestions of people implementing the code and you might find a lot of answered questions there already!
We are very happy that SimpleFOClibrary has been used as a component of several research project and has made its way to several scientific papers. We are hoping that this trend is going to continue as the project matures and becomes more robust! A short resume paper about SimpleFOC has been published in the Journal of Open Source Software:
SimpleFOC: A Field Oriented Control (FOC) Library for Controlling Brushless Direct Current (BLDC) and Stepper Motors.
A. Skuric, HS. Bank, R. Unger, O. Williams, D. González-Reyes
Journal of Open Source Software, 7(74), 4232, https://doi.org/10.21105/joss.04232
If you are interested in citing SimpleFOClibrary or some other component of SimpleFOCproject in your research, we suggest you to cite our paper
These are the GNU core utilities.  This package is the union of
the GNU fileutils, sh-utils, and textutils packages.
Most of these programs have significant advantages over their Unix
counterparts, such as greater speed, additional options, and fewer
arbitrary limits.

The programs that can be built with this package are:

  [ arch b2sum base32 base64 basename basenc cat chcon chgrp chmod chown
  chroot cksum comm coreutils cp csplit cut date dd df dir dircolors dirname
  du echo env expand expr factor false fmt fold groups head hostid hostname
  id install join kill link ln logname ls md5sum mkdir mkfifo mknod mktemp
  mv nice nl nohup nproc numfmt od paste pathchk pinky pr printenv printf ptx
  pwd readlink realpath rm rmdir runcon seq sha1sum sha224sum sha256sum
  sha384sum sha512sum shred shuf sleep sort split stat stdbuf stty sum sync
  tac tail tee test timeout touch tr true truncate tsort tty uname unexpand
  uniq unlink uptime users vdir wc who whoami yes

See the file NEWS for a list of major changes in the current release.

If you obtained this file as part of a "git clone", then see the
README-hacking file.  If this file came to you as part of a tar archive,
then see the file INSTALL for general compilation and installation
instructions, or README-install for system and coreutils specific instructions.

Like the rest of the GNU system, these programs mostly conform to
POSIX, with BSD and other extensions.  For closer conformance, or
conformance to a particular POSIX version, set the POSIXLY_CORRECT
and the _POSIX2_VERSION environment variables, as described in
the documentation under "Standards conformance".

The ls, dir, and vdir commands are all separate executables instead of
one program that checks argv[0] because people often rename these
programs to things like gls, gnuls, l, etc.  Renaming a program
file shouldn't affect how it operates, so that people can get the
behavior they want with whatever name they want.

Special thanks to Paul Eggert, Brian Matthews, Bruce Evans, Karl Berry,
Kaveh Ghazi, and François Pinard for help with debugging and porting
these programs.  Many thanks to all of the people who have taken the
time to submit problem reports and fixes.  All contributed changes are
attributed in the commit logs.

And thanks to the following people who have provided accounts for
portability testing on many different types of systems: Bob Proulx,
Christian Robert, François Pinard, Greg McGary, Harlan Stenn,
Joel N. Weber, Mark D. Roth, Matt Schalit, Nelson H. F. Beebe,
Réjean Payette, Sam Tardieu.

Thanks to Michael Stone for inflicting test releases of this package
on Debian's unstable distribution, and to all the kind folks who used
that distribution and found and reported bugs.

Note that each man page is now automatically generated from a template
and from the corresponding --help usage message.  Patches to the template
files (man/*.x) are welcome.  However, the authoritative documentation
is in texinfo form in the doc directory.


***************
Feature requests:
---------------

If you would like to add a new feature, please try to get some sort of
consensus that it is a worthwhile change.  One way to do that is to send
mail to coreutils@gnu.org including as much description and justification
as you can.  Based on the feedback that generates, you may be able to
convince us that it's worth adding.  Please also consult the list of
previously discussed but ultimately rejected feature requests at:
https://www.gnu.org/software/coreutils/rejected_requests.html


***************
Reporting bugs:
---------------

Send bug reports, questions, comments, etc. to bug-coreutils@gnu.org.
To suggest a patch, see the files README-hacking and HACKING for tips.

All of these programs except 'test' recognize the '--version' option.
When reporting bugs, please include in the subject line both the package
name/version and the name of the program for which you found a problem.

If you have a problem with 'sort', try running 'sort --debug', as it
can often help find and fix problems without having to wait for an
answer to a bug report.  If the debug output does not suffice to fix
the problem on your own, please compress and attach it to the rest of
your bug report.

IMPORTANT: if you take the time to report a test failure,
please be sure to include the output of running 'make check'
in verbose mode for each failing test.  For example,
if the test that fails is tests/df/df-P.sh, then you would
run this command:

  make check TESTS=tests/df/df-P.sh VERBOSE=yes SUBDIRS=. >> log 2>&1

For some tests, particularly perl tests, you can get even more detail by adding
DEBUG=yes. Then include the contents of the file 'log' in your bug report.


***************************************

There are many tests, but nowhere near as many as we need.
Additions and corrections are very welcome.

If you see a problem that you've already reported, feel free to re-report
it -- it won't bother us to get a reminder.  Besides, the more messages we
get regarding a particular problem the sooner it'll be fixed -- usually.
If you sent a complete patch and, after a couple weeks you haven't
received any acknowledgement, please ping us.  A complete patch includes
a well-written ChangeLog entry, unified (diff -u format) diffs relative
to the most recent test release (or, better, relative to the latest
sources in the public repository), an explanation for why the patch is
necessary or useful, and if at all possible, enough information to
reproduce whatever problem prompted it.  Plus, you'll earn lots of
karma if you include a test case to exercise any bug(s) you fix.
Here are instructions for checking out the latest development sources:

  https://savannah.gnu.org/git/?group=coreutils

For general documentation on the coding and usage standards
this distribution follows, see the GNU Coding Standards at:
https://www.gnu.org/prep/standards/

For any copyright year range specified as YYYY-ZZZZ in this package
note that the range specifies every single year in that closed interval.

Please see the file COPYING for copying conditions.

========================================================================

Copyright (C) 1998-2024 Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
Texts.  A copy of the license is included in the "GNU Free
Documentation License" file as part of this distribution.

Adafruit_ILI9341 ORIGINAL LIBRARY HEADER:
vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvStartvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
  This is our library for the Adafruit  ILI9341 Breakout and Shield
  ----> http://www.adafruit.com/products/1651

  Check out the links above for our tutorials and wiring diagrams
  These displays use SPI to communicate, 4 or 5 pins are required to
  interface (RST is optional)
  Adafruit invests time and resources providing this open source code,
  please support Adafruit and open-source hardware by purchasing
  products from Adafruit!

  Written by Limor Fried/Ladyada for Adafruit Industries.
  MIT license, all text above must be included in any redistribution
  
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^End^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Adafruit_GFX ORIGINAL LIBRARY LICENSE:
vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvStartvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

Software License Agreement (BSD License)

Copyright (c) 2012 Adafruit Industries.  All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

- Redistributions of source code must retain the above copyright notice,
  this list of conditions and the following disclaimer.
- Redistributions in binary form must reproduce the above copyright notice,
  this list of conditions and the following disclaimer in the documentation
  and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^End^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

TFT_eSPI ORIGINAL LIBRARY LICENSE:
vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvStartvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
Software License Agreement (FreeBSD License)

Copyright (c) 2020 Bodmer (https://github.com/Bodmer)

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

The views and conclusions contained in the software and documentation are those
of the authors and should not be interpreted as representing official policies,
either expressed or implied, of the FreeBSD Project.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^End^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

LovyanGFX ORIGINAL LIBRARY LICENSE:
vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvStartvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
Software License Agreement (FreeBSD License)

Copyright (c) 2020 lovyan03 (https://github.com/lovyan03)

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

The views and conclusions contained in the software and documentation are those
of the authors and should not be interpreted as representing official policies,
either expressed or implied, of the FreeBSD Project.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^End^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Copyright (c) 2013-2015 Steve Luken, www.linkedin.com/in/steveluken

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
if( ${CMAKE_VERSION} VERSION_GREATER "3.11.0" )
cmake_policy( SET CMP0077 NEW )
endif( ${CMAKE_VERSION} VERSION_GREATER "3.11.0" )
set_property(GLOBAL PROPERTY USE_FOLDERS On)
cmake_minimum_required(VERSION 3.20)

set(CMAKE_BUILD_TYPE "debug" CACHE STRING "Set build type")

set( CMAKE_BUILD_RPATH_USE_ORIGIN ON )
set( CMAKE_BUILD_WITH_INSTALL_RPATH ON )
set( CMAKE_INSTALL_RPATH_USE_LINK_PATH OFF )
set( CMAKE_SKIP_INSTALL_RPATH OFF )

if( NOT PROJECT_NAME )
project( Sack.all )
endif( NOT PROJECT_NAME )

# include this so default output paths get defined.
include( ${CMAKE_CURRENT_SOURCE_DIR}/../makefiles/cmake/DefaultInstall.cmake )

set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS
			${CMAKE_CONFIGURATION_TYPES} Debug Release RelWithDebInfo MinSizeRel )

include( ${CMAKE_CURRENT_LIST_DIR}/CMakeExtBuild.txt )

if( CMAKE_HOST_SYSTEM_NAME STREQUAL "Android" )
	DEFINE_DEFAULT( __ANDROID__ ON )
else( CMAKE_HOST_SYSTEM_NAME STREQUAL "Android")
	DEFINE_DEFAULT( __ANDROID__ OFF )
endif( CMAKE_HOST_SYSTEM_NAME STREQUAL "Android" )

if( NOT TARGET_INSTALL_PREFIX )
  SET(TARGET_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX} CACHE STRING  "Used to compile as installation path" )
endif( NOT TARGET_INSTALL_PREFIX )

if( __ANDROID__ )
   set( __NO_ODBC__ 1 )  # someday port unixodbc library?  But then the mysql driver needs to be ported
   set( __LINUX__ 1 )    # build as if it's linux
   DEFINE_DEFAULT( __ARM__ ON )
   set( D__ANDROID__ "-D__ANDROID__=${__ANDROID__} -DANDROID_DIR=${ANDROID_DIR} -DANDROID_NDK_VERSION=${ANDROID_NDK_VERSION}" )
   DEFINE_DEFAULT( BUILD_EXTRAS ON )
else( __ANDROID_ )
   DEFINE_DEFAULT( __ARM__ OFF )
   DEFINE_DEFAULT( BUILD_EXTRAS OFF )
endif( __ANDROID__ )

if( WIN32 OR __ANDROID__ )
DEFINE_DEFAULT( NEED_FREETYPE ON )
DEFINE_DEFAULT( NEED_JPEG ON )
DEFINE_DEFAULT( NEED_PNG ON )
DEFINE_DEFAULT( NEED_ZLIB ON )
DEFINE_DEFAULT( NEED_UUID OFF )
else( WIN32 OR __ANDROID__ )
DEFINE_DEFAULT( NEED_FREETYPE OFF )
DEFINE_DEFAULT( NEED_JPEG OFF )
DEFINE_DEFAULT( NEED_PNG OFF )
DEFINE_DEFAULT( NEED_ZLIB OFF )
set( __NO_ODBC__ 0 )  # someday port unixodbc library?  But then the mysql driver needs to be ported
set( __LINUX__ ON )
if(CMAKE_SIZEOF_VOID_P EQUAL 8)
  set( __LINUX64__ ON)
endif()
if( EXISTS /usr/include/uuid/uuid.h )
DEFINE_DEFAULT( NEED_UUID OFF )
else()
DEFINE_DEFAULT( NEED_UUID ON )
endif()
endif( WIN32 OR __ANDROID__ )

DEFINE_DEFAULT( BUILD_TESTS OFF )
DEFINE_DEFAULT( FORCE_MSVCRT  OFF )
DEFINE_DEFAULT( GENERATOR_BUILD_ALL_NOW  OFF )
DEFINE_DEFAULT( GENERATOR_BUILD_INSTALL_NOW  OFF )
DEFINE_DEFAULT( GENERATOR_BUILD_PACKAGE_NOW  OFF )
DEFINE_DEFAULT( DIRECTX_SDK "" )
DEFINE_DEFAULT( __CLR__ 0 )

IF(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
  if( CMAKE_BINARY_DIR MATCHES ${CMAKE_BUILD_TYPE}_solution\$ )
  SET(CMAKE_INSTALL_PREFIX
    ${CMAKE_BINARY_DIR}/../${CMAKE_BUILD_TYPE}_out CACHE PATH "Install default 'out' in this directory." FORCE
    )
    else()
  SET(CMAKE_INSTALL_PREFIX
    ${CMAKE_BINARY_DIR}/${CMAKE_BUILD_TYPE}_out CACHE PATH "Install default 'out' in this directory." FORCE
    )
  endif( CMAKE_BINARY_DIR MATCHES ${CMAKE_BUILD_TYPE}_solution\$ )
ENDIF(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
set( BULLET_SOURCE "${CMAKE_CURRENT_SOURCE_DIR}/../../bullet" CACHE STRING "bullet source path "  )
#OPTION( BULLET_SOURCE "bullet source path" "${CMAKE_CURRENT_SOURCE_DIR}/../../bullet/source" )
#OPTION( BUILD_MONOLITHIC "Build as one big library instead of parts" ${BUILD_MONOLITHIC} )
OPTION( BUILD_EXTRAS "Enable building extra projects (dekware, games, ... )" ${BUILD_EXTRAS} )
OPTION( BUILD_TESTS "Enable building test projects" ${BUILD_TESTS} )
OPTION( GENERATOR_BUILD_ALL_NOW "Enable building during the generate" ${GENERATOR_BUILD_ALL_NOW} )
OPTION( GENERATOR_BUILD_INSTALL_NOW "Enable building during the generate" ${GENERATOR_BUILD_INSTALL_NOW} )
OPTION( GENERATOR_BUILD_PACKAGE_NOW "Enable building installable packages (will mostly fail)" ${GENERATOR_BUILD_PACKAGE_NOW} )
OPTION( FORCE_MSVCRT "force using msvcrt instead of current version SDK libraries" ${FORCE_MSVCRT} )
#option( BUILD_UNICODE "Enable building everything as unicode" ${BUILD_UNICODE} )
option( __ANDROID__ "Enable target to android" ${__ANDROID__} )

if( DIRECTX_SDK )
# if directx had to be passed as an environment variable (has spaces)
# then it's already set, and don't have to pass it... otherwise we couldn't pass it.
  STRING( REPLACE "\\" "/" DDIRECTX_SDK -DDIRECTX_SDK=\"${DIRECTX_SDK}\" )
endif( DIRECTX_SDK )

if( BUILD_TESTS )
SET( DBUILD_TESTS -DBUILD_TESTS=${BUILD_TESTS} )
endif( BUILD_TESTS )

if( __CLR__ )
SET( D__CLR__ -D__CLR__=${__CLR__} )
endif( __CLR__ )

if( __LINUX__ )
SET( D__LINUX__ -D__LINUX__=${__LINUX__} )
endif( __LINUX__ )

if( __LINUX64__ )
SET( D__LINUX64__ -D__LINUX64__=${__LINUX64__} )
endif( __LINUX64__ )

if( __ARM__ )
SET( D__ARM__ -D__ARM__=${__ARM__} )
endif( __ARM__ )

if( FORCE_MSVCRT )
SET( DFORCE_MSVCRT -DFORCE_MSVCRT=${FORCE_MSVCRT} )
endif( FORCE_MSVCRT )


SET( SACK_REQUIREMENTS -DNEED_FREETYPE=${NEED_FREETYPE} -DNEED_JPEG=${NEED_JPEG} -DNEED_PNG=${NEED_PNG} -DNEED_ZLIB=${NEED_ZLIB} )
if( UNIX )
#message( "Not win32 (${WIN32}), UNIX(${UNIX}) but MINGW=\"${MINGW}\" maybe android? ; not passing need_externals" )
#set( SACK_REQUIREMENTS -DNEED_UUID=ON )
endif( UNIX )

IF(EXISTS ${BULLET_SOURCE}/CMakeLists.txt )
  if( WATCOM )
  else( WATCOM )
    set( BULLET_ENABLED ON )
    set( DBULLET_SOURCE -DBULLET_SOURCE=${BULLET_SOURCE} )
  endif( WATCOM )
endIF(EXISTS ${BULLET_SOURCE}/CMakeLists.txt )


set( PROJECT core )
set( EXTRA_FLAGS  -DBUILD_EXTRAS=${BUILD_EXTRAS}
			-D__NO_ODBC__=${__NO_ODBC__}
			\"-DTARGET_INSTALL_PREFIX=${TARGET_INSTALL_PREFIX}\"			
			${DDIRECTX_SDK}
        	        ${SACK_REQUIREMENTS} 
                	${DFORCE_MSVCRT} 
	                ${DBUILD_TESTS} 
                        ${DBULLET_SOURCE}
                        ${D__ARM__}
                        ${D__LINUX__}
                        ${D__LINUX64__}
                        ${D__ANDROID__}
                        ${D__CLR__}
                        ${DDX_SDK}
                )

set( PROJECT_BASE_PROJECT ${PROJECT} )
BuildProject( ${PROJECT} sack ${CMAKE_CURRENT_LIST_DIR}/.. SACK_SDK_ROOT_PATH ${EXTRA_FLAGS} )

set( EXTRA_FLAGS -DSACK_SDK_ROOT_PATH=${SACK_SDK_ROOT_PATH} )

#BuildProject( ${PROJECT}.framebuffer sack.nosolution ${CMAKE_CURRENT_LIST_DIR}/../not-exists UNUSED_SACK_SDK_ROOT_PATH ${EXTRA_FLAGS} )
#BuildProject( ${PROJECT}.puregl2 sack.nosolution ${CMAKE_CURRENT_LIST_DIR}/../not-exists UNUSED_SACK_SDK_ROOT_PATH ${EXTRA_FLAGS} )

if( NOT __ANDROID__ )
  # this calls sack_deploy to build cmakepackage
  # on android ended up making a cmake-configured-cmake-script to make this file.
#  Add_custom_command( TARGET Build${PROJECT} 
#	COMMAND ${SACK_SDK_ROOT_PATH}/${BINARY_OUTPUT_DIR}/sack_deploy${CMAKE_EXECUTABLE_SUFFIX} -nr
#	WORKING_DIRECTORY ${SACK_SDK_ROOT_PATH}
#  )                
endif( NOT __ANDROID__ )

if( NOT __CLR__ )
set( PROJECT binary )
set( EXTRA_FLAGS  -DSACK_SDK_ROOT_PATH=${SACK_SDK_ROOT_PATH} ${D__ANDROID__} )
BuildProject( ${PROJECT} sack.binaries ${CMAKE_CURRENT_LIST_DIR}/../binary SACK_BINARY_SDK_ROOT_PATH ${EXTRA_FLAGS} )
add_dependencies( ${LAST_TARGET} ${PROJECT_BASE_PROJECT} )
else( NOT __CLR__ )
message( "Disabled Binaries output for CLR build" )
endif( NOT __CLR__ )


set( PROJECT intershell )
set( EXTRA_FLAGS  -DSACK_SDK_ROOT_PATH=${SACK_SDK_ROOT_PATH} ${D__ANDROID__} )
BuildProject( ${PROJECT} ${PROJECT} ${CMAKE_CURRENT_LIST_DIR}/../src/InterShell.stable INTERSHELL_SDK_ROOT_PATH ${EXTRA_FLAGS} )
add_dependencies( ${LAST_TARGET} ${PROJECT_BASE_PROJECT} binary )

if( NOT __LINUX__ AND NOT __ANDROID__ )
  set( PROJECT intershell_Package )
  set( EXTRA_FLAGS  -DSACK_SDK_ROOT_PATH=${SACK_SDK_ROOT_PATH} ${D__ANDROID__} )
  BuildProject( ${PROJECT} Intershell.Package ${CMAKE_CURRENT_LIST_DIR}/../src/InterShell.stable/package INTERSHELL_PACKAGE_ROOT_PATH ${EXTRA_FLAGS} -DINTERSHELL_SDK_ROOT_PATH=${INTERSHELL_SDK_ROOT_PATH} )
  add_dependencies( ${LAST_TARGET} ${PROJECT_BASE_PROJECT} intershell )
endif( NOT __LINUX__ AND NOT __ANDROID__ )


#set( PROJECT intershell2 )
#set( EXTRA_FLAGS  -DSACK_SDK_ROOT_PATH=${SACK_SDK_ROOT_PATH} ${D__ANDROID__} )
#BuildProject( ${PROJECT} ${PROJECT} ${CMAKE_CURRENT_LIST_DIR}/../src/InterShell INTERSHELL2_SDK_ROOT_PATH ${EXTRA_FLAGS} )
#add_dependencies( ${LAST_TARGET} ${PROJECT_BASE_PROJECT} binary )

if( NOT __ANDROID__ )
  set( PROJECT mercurial_version_tagger )
  set( EXTRA_FLAGS  -DSACK_SDK_ROOT_PATH=${SACK_SDK_ROOT_PATH} ${D__ANDROID__} )
  BuildProject( ${PROJECT} ${PROJECT} ${CMAKE_CURRENT_LIST_DIR}/../src/utils/mercurial_version_tagger MERCURIAL_TAGGER_ROOT_PATH ${EXTRA_FLAGS} )
  add_dependencies( ${LAST_TARGET} ${PROJECT_BASE_PROJECT} )
endif( NOT __ANDROID__ )

IF( BULLET_ENABLED )
  message( "Congratz, you get Bullet projects" )
  if( NOT __ANDROID__ )
    set( PROJECT ball_mixer1 )
    set( EXTRA_FLAGS_MIXER  -DSACK_SDK_ROOT_PATH=${SACK_SDK_ROOT_PATH} -DSACK_BINARY_SDK_ROOT_PATH=${SACK_BINARY_SDK_ROOT_PATH} -DINTERSHELL_SDK_ROOT_PATH=${INTERSHELL_SDK_ROOT_PATH} ${D__ANDROID__} )
    BuildProject( ${PROJECT} ${PROJECT} ${CMAKE_CURRENT_LIST_DIR}/../src/games/ball_mixer INSTALL ${EXTRA_FLAGS_MIXER} )
    add_dependencies( ${LAST_TARGET} ${PROJECT_BASE_PROJECT} binary intershell )
  endif( NOT __ANDROID__ )

  set( PROJECT ball_mixer2 )
  set( EXTRA_FLAGS_MIXER  -DSACK_SDK_ROOT_PATH=${SACK_SDK_ROOT_PATH} -DSACK_BINARY_SDK_ROOT_PATH=${SACK_BINARY_SDK_ROOT_PATH} -DINTERSHELL_SDK_ROOT_PATH=${INTERSHELL_SDK_ROOT_PATH} ${D__ANDROID__} )
  BuildProject( ${PROJECT} ${PROJECT} ${CMAKE_CURRENT_LIST_DIR}/../src/games/ball_mixer2 INSTALL ${EXTRA_FLAGS_MIXER} )
  add_dependencies( ${LAST_TARGET} ${PROJECT_BASE_PROJECT} binary intershell )

ENDIF( BULLET_ENABLED )

if( BUILD_EXTRAS )
  include( ${CMAKE_CURRENT_LIST_DIR}/CMakeLists.extras.txt )
endif( BUILD_EXTRAS )
DEX UI is a handcrafted interface programmed in openFrameworks, running fullscreen underneath a functioning terminal, giving the experience of having a sci fi computer. More.
The project's source code is hosted here for reference. Included are the openFrameworks project source files and shaders, as well as the changes I made to BSPWM (more below). Not included are things like fonts and images.
Note: Dex UI was designed as an experiment or an art piece, not distributable software, so as a result, the code (though I've cleaned it up some) is not the easiest to sort through. Also, because it is no longer in development, I won't be trying to make this work on other people machines - that part's up to you.
What's Happening in the Video Demo
Real desktops revolve around windows, but most sci fi interfaces have these integrated desktops with all sort of animations and no apparent windows. Dex UI aimed to create the illusion of a desktop environment without windows while in reality still operating with windows (in X Windowing System).
To do this, the interface is a single openFrameworks program that handles all the animations. By modifying BSPWM I added a window mode to allow the interface to sit fullscreen beneath any other window. After the introduction animation occurs, a terminal (URXVT) is created above the interface and its size is constrained to the outline drawn in the interface. In short it is two layered windows, but because the windows have no borders or shadows, visually this looks like one integrated interface.
How do I run Dex UI
The code here is for an openFrameworks project. The first step is to get openFrameworks, and get the graphics examples running to confirm it's really working. Then you can start a new project and add the files. Beyond that, fonts and images are not included here, which may be problematic as all of the type work is hard coded.
How I contribute?
This project is here for reference and not in active development, so it is very unlikely I will continue to make changes, or respond to requests to make changes.
Why openFrameworks?
I needed something capable of creating lots of dynamic animations. This could be Processing, pure OpenGL, openFrameworks, etc. Originally my prototypes were in Processing, but for performance reasons I switched to openFrameworks. From what I've learned, many movie interfaces are put together in AfterEffects, so if you wanted to create an interface that did not respond to input, this is also an option.
BSPWM?
BSPWM was what I was working with, but it took some effort to make a window persistently stay fullscreen. The choice of window manager isn't a huge deal, just find something to make the illusion work.
I've also included a .diff file with the changes (to BSPWM commit c49bc92) I made to BSPWM to add what I (for no reason) named power mode. A window can be set to power mode making it stay fullscreen, beneath all other windows across multiple desktops. I've been told a similar effect can be achieved with wmutils, and this might be an easier route.
Font?
Inside the terminal we have Fira Mono, and the rest is United Sans Medium.
Is this working with real data
The keyboard contains some code to work using /dev/input, but the rest still needs to be hooked up to system data. Luckily this is straightforward and only requires replacing the generated data with sampled data.
Why the onscreen Keyboard, does it work with touch screens?
It's there because I think it looks cool. While it doesn't work with touch screens, it might be possible by making the project respond to mouse/touch input.
FlashDB is an ultra-lightweight embedded database that focuses on providing data storage solutions for embedded products. Different from traditional database based on file system, FlashDB combines the features of Flash and has strong performance and reliability. And under the premise of ensuring extremely low resource occupation, the service life of Flash should be extended as much as possible.
Nowadays, there are more and more types of IoT products, and the types and total amount of data generated during operation are also increasing. FlashDB provides a variety of data storage solutions, not only has a small resource footprint, but also has a large storage capacity, which is very suitable for IoT products. The following are the main application scenarios
BLDC motors are entering the hobby community more and more and many great projects have already emerged leveraging their far superior dynamics and power capabilities. BLDC motors have numerous advantages over regular DC motors but they have one big disadvantage, the complexity of control. Even though it has become relatively easy to design and manufacture PCBs and create our own hardware solutions for driving BLDC motors the proper low-cost solutions are yet to come. One of the reasons for this is the apparent complexity of writing the BLDC driving algorithms, Field oriented control (FOC) being an example of one of the most efficient ones. The solutions that can be found on-line are almost exclusively very specific for certain hardware configuration and the microcontroller architecture used. Additionally, most of the efforts at this moment are still channeled towards the high-power applications of the BLDC motors and proper low-cost and low-power FOC supporting boards are very hard to find today and even may not exist.
Please do not hesitate to leave an issue if you have problems/advices/suggestions regarding the code!
Pull requests are welcome, but let's first discuss them in community forum!
If you'd like to contribute to this project but you are not very familiar with github, don't worry, let us know either by posting at the community forum , by posting a github issue or at our discord server.
If you are familiar, we accept pull requests to the dev branch!
For all the questions regarding the potential implementation, applications, supported hardware and similar please visit our community forum or our discord server.
It is always helpful to hear the stories/problems/suggestions of people implementing the code and you might find a lot of answered questions there already!
We are very happy that SimpleFOClibrary has been used as a component of several research project and has made its way to several scientific papers. We are hoping that this trend is going to continue as the project matures and becomes more robust! A short resume paper about SimpleFOC has been published in the Journal of Open Source Software:
SimpleFOC: A Field Oriented Control (FOC) Library for Controlling Brushless Direct Current (BLDC) and Stepper Motors.
A. Skuric, HS. Bank, R. Unger, O. Williams, D. González-Reyes
Journal of Open Source Software, 7(74), 4232, https://doi.org/10.21105/joss.04232
If you are interested in citing SimpleFOClibrary or some other component of SimpleFOCproject in your research, we suggest you to cite our paper
These are the GNU core utilities.  This package is the union of
the GNU fileutils, sh-utils, and textutils packages.
Most of these programs have significant advantages over their Unix
counterparts, such as greater speed, additional options, and fewer
arbitrary limits.

The programs that can be built with this package are:

  [ arch b2sum base32 base64 basename basenc cat chcon chgrp chmod chown
  chroot cksum comm coreutils cp csplit cut date dd df dir dircolors dirname
  du echo env expand expr factor false fmt fold groups head hostid hostname
  id install join kill link ln logname ls md5sum mkdir mkfifo mknod mktemp
  mv nice nl nohup nproc numfmt od paste pathchk pinky pr printenv printf ptx
  pwd readlink realpath rm rmdir runcon seq sha1sum sha224sum sha256sum
  sha384sum sha512sum shred shuf sleep sort split stat stdbuf stty sum sync
  tac tail tee test timeout touch tr true truncate tsort tty uname unexpand
  uniq unlink uptime users vdir wc who whoami yes

See the file NEWS for a list of major changes in the current release.

If you obtained this file as part of a "git clone", then see the
README-hacking file.  If this file came to you as part of a tar archive,
then see the file INSTALL for general compilation and installation
instructions, or README-install for system and coreutils specific instructions.

Like the rest of the GNU system, these programs mostly conform to
POSIX, with BSD and other extensions.  For closer conformance, or
conformance to a particular POSIX version, set the POSIXLY_CORRECT
and the _POSIX2_VERSION environment variables, as described in
the documentation under "Standards conformance".

The ls, dir, and vdir commands are all separate executables instead of
one program that checks argv[0] because people often rename these
programs to things like gls, gnuls, l, etc.  Renaming a program
file shouldn't affect how it operates, so that people can get the
behavior they want with whatever name they want.

Special thanks to Paul Eggert, Brian Matthews, Bruce Evans, Karl Berry,
Kaveh Ghazi, and François Pinard for help with debugging and porting
these programs.  Many thanks to all of the people who have taken the
time to submit problem reports and fixes.  All contributed changes are
attributed in the commit logs.

And thanks to the following people who have provided accounts for
portability testing on many different types of systems: Bob Proulx,
Christian Robert, François Pinard, Greg McGary, Harlan Stenn,
Joel N. Weber, Mark D. Roth, Matt Schalit, Nelson H. F. Beebe,
Réjean Payette, Sam Tardieu.

Thanks to Michael Stone for inflicting test releases of this package
on Debian's unstable distribution, and to all the kind folks who used
that distribution and found and reported bugs.

Note that each man page is now automatically generated from a template
and from the corresponding --help usage message.  Patches to the template
files (man/*.x) are welcome.  However, the authoritative documentation
is in texinfo form in the doc directory.


***************
Feature requests:
---------------

If you would like to add a new feature, please try to get some sort of
consensus that it is a worthwhile change.  One way to do that is to send
mail to coreutils@gnu.org including as much description and justification
as you can.  Based on the feedback that generates, you may be able to
convince us that it's worth adding.  Please also consult the list of
previously discussed but ultimately rejected feature requests at:
https://www.gnu.org/software/coreutils/rejected_requests.html


***************
Reporting bugs:
---------------

Send bug reports, questions, comments, etc. to bug-coreutils@gnu.org.
To suggest a patch, see the files README-hacking and HACKING for tips.

All of these programs except 'test' recognize the '--version' option.
When reporting bugs, please include in the subject line both the package
name/version and the name of the program for which you found a problem.

If you have a problem with 'sort', try running 'sort --debug', as it
can often help find and fix problems without having to wait for an
answer to a bug report.  If the debug output does not suffice to fix
the problem on your own, please compress and attach it to the rest of
your bug report.

IMPORTANT: if you take the time to report a test failure,
please be sure to include the output of running 'make check'
in verbose mode for each failing test.  For example,
if the test that fails is tests/df/df-P.sh, then you would
run this command:

  make check TESTS=tests/df/df-P.sh VERBOSE=yes SUBDIRS=. >> log 2>&1

For some tests, particularly perl tests, you can get even more detail by adding
DEBUG=yes. Then include the contents of the file 'log' in your bug report.


***************************************

There are many tests, but nowhere near as many as we need.
Additions and corrections are very welcome.

If you see a problem that you've already reported, feel free to re-report
it -- it won't bother us to get a reminder.  Besides, the more messages we
get regarding a particular problem the sooner it'll be fixed -- usually.
If you sent a complete patch and, after a couple weeks you haven't
received any acknowledgement, please ping us.  A complete patch includes
a well-written ChangeLog entry, unified (diff -u format) diffs relative
to the most recent test release (or, better, relative to the latest
sources in the public repository), an explanation for why the patch is
necessary or useful, and if at all possible, enough information to
reproduce whatever problem prompted it.  Plus, you'll earn lots of
karma if you include a test case to exercise any bug(s) you fix.
Here are instructions for checking out the latest development sources:

  https://savannah.gnu.org/git/?group=coreutils

For general documentation on the coding and usage standards
this distribution follows, see the GNU Coding Standards at:
https://www.gnu.org/prep/standards/

For any copyright year range specified as YYYY-ZZZZ in this package
note that the range specifies every single year in that closed interval.

Please see the file COPYING for copying conditions.

========================================================================

Copyright (C) 1998-2024 Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
Texts.  A copy of the license is included in the "GNU Free
Documentation License" file as part of this distribution.

Adafruit_ILI9341 ORIGINAL LIBRARY HEADER:
vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvStartvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
  This is our library for the Adafruit  ILI9341 Breakout and Shield
  ----> http://www.adafruit.com/products/1651

  Check out the links above for our tutorials and wiring diagrams
  These displays use SPI to communicate, 4 or 5 pins are required to
  interface (RST is optional)
  Adafruit invests time and resources providing this open source code,
  please support Adafruit and open-source hardware by purchasing
  products from Adafruit!

  Written by Limor Fried/Ladyada for Adafruit Industries.
  MIT license, all text above must be included in any redistribution
  
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^End^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Adafruit_GFX ORIGINAL LIBRARY LICENSE:
vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvStartvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

Software License Agreement (BSD License)

Copyright (c) 2012 Adafruit Industries.  All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

- Redistributions of source code must retain the above copyright notice,
  this list of conditions and the following disclaimer.
- Redistributions in binary form must reproduce the above copyright notice,
  this list of conditions and the following disclaimer in the documentation
  and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^End^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

TFT_eSPI ORIGINAL LIBRARY LICENSE:
vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvStartvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
Software License Agreement (FreeBSD License)

Copyright (c) 2020 Bodmer (https://github.com/Bodmer)

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

The views and conclusions contained in the software and documentation are those
of the authors and should not be interpreted as representing official policies,
either expressed or implied, of the FreeBSD Project.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^End^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

LovyanGFX ORIGINAL LIBRARY LICENSE:
vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvStartvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
Software License Agreement (FreeBSD License)

Copyright (c) 2020 lovyan03 (https://github.com/lovyan03)

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

The views and conclusions contained in the software and documentation are those
of the authors and should not be interpreted as representing official policies,
either expressed or implied, of the FreeBSD Project.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^End^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Copyright (c) 2013-2015 Steve Luken, www.linkedin.com/in/steveluken

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
if( ${CMAKE_VERSION} VERSION_GREATER "3.11.0" )
cmake_policy( SET CMP0077 NEW )
endif( ${CMAKE_VERSION} VERSION_GREATER "3.11.0" )
set_property(GLOBAL PROPERTY USE_FOLDERS On)
cmake_minimum_required(VERSION 3.20)

set(CMAKE_BUILD_TYPE "debug" CACHE STRING "Set build type")

set( CMAKE_BUILD_RPATH_USE_ORIGIN ON )
set( CMAKE_BUILD_WITH_INSTALL_RPATH ON )
set( CMAKE_INSTALL_RPATH_USE_LINK_PATH OFF )
set( CMAKE_SKIP_INSTALL_RPATH OFF )

if( NOT PROJECT_NAME )
project( Sack.all )
endif( NOT PROJECT_NAME )

# include this so default output paths get defined.
include( ${CMAKE_CURRENT_SOURCE_DIR}/../makefiles/cmake/DefaultInstall.cmake )

set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS
			${CMAKE_CONFIGURATION_TYPES} Debug Release RelWithDebInfo MinSizeRel )

include( ${CMAKE_CURRENT_LIST_DIR}/CMakeExtBuild.txt )

if( CMAKE_HOST_SYSTEM_NAME STREQUAL "Android" )
	DEFINE_DEFAULT( __ANDROID__ ON )
else( CMAKE_HOST_SYSTEM_NAME STREQUAL "Android")
	DEFINE_DEFAULT( __ANDROID__ OFF )
endif( CMAKE_HOST_SYSTEM_NAME STREQUAL "Android" )

if( NOT TARGET_INSTALL_PREFIX )
  SET(TARGET_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX} CACHE STRING  "Used to compile as installation path" )
endif( NOT TARGET_INSTALL_PREFIX )

if( __ANDROID__ )
   set( __NO_ODBC__ 1 )  # someday port unixodbc library?  But then the mysql driver needs to be ported
   set( __LINUX__ 1 )    # build as if it's linux
   DEFINE_DEFAULT( __ARM__ ON )
   set( D__ANDROID__ "-D__ANDROID__=${__ANDROID__} -DANDROID_DIR=${ANDROID_DIR} -DANDROID_NDK_VERSION=${ANDROID_NDK_VERSION}" )
   DEFINE_DEFAULT( BUILD_EXTRAS ON )
else( __ANDROID_ )
   DEFINE_DEFAULT( __ARM__ OFF )
   DEFINE_DEFAULT( BUILD_EXTRAS OFF )
endif( __ANDROID__ )

if( WIN32 OR __ANDROID__ )
DEFINE_DEFAULT( NEED_FREETYPE ON )
DEFINE_DEFAULT( NEED_JPEG ON )
DEFINE_DEFAULT( NEED_PNG ON )
DEFINE_DEFAULT( NEED_ZLIB ON )
DEFINE_DEFAULT( NEED_UUID OFF )
else( WIN32 OR __ANDROID__ )
DEFINE_DEFAULT( NEED_FREETYPE OFF )
DEFINE_DEFAULT( NEED_JPEG OFF )
DEFINE_DEFAULT( NEED_PNG OFF )
DEFINE_DEFAULT( NEED_ZLIB OFF )
set( __NO_ODBC__ 0 )  # someday port unixodbc library?  But then the mysql driver needs to be ported
set( __LINUX__ ON )
if(CMAKE_SIZEOF_VOID_P EQUAL 8)
  set( __LINUX64__ ON)
endif()
if( EXISTS /usr/include/uuid/uuid.h )
DEFINE_DEFAULT( NEED_UUID OFF )
else()
DEFINE_DEFAULT( NEED_UUID ON )
endif()
endif( WIN32 OR __ANDROID__ )

DEFINE_DEFAULT( BUILD_TESTS OFF )
DEFINE_DEFAULT( FORCE_MSVCRT  OFF )
DEFINE_DEFAULT( GENERATOR_BUILD_ALL_NOW  OFF )
DEFINE_DEFAULT( GENERATOR_BUILD_INSTALL_NOW  OFF )
DEFINE_DEFAULT( GENERATOR_BUILD_PACKAGE_NOW  OFF )
DEFINE_DEFAULT( DIRECTX_SDK "" )
DEFINE_DEFAULT( __CLR__ 0 )

IF(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
  if( CMAKE_BINARY_DIR MATCHES ${CMAKE_BUILD_TYPE}_solution\$ )
  SET(CMAKE_INSTALL_PREFIX
    ${CMAKE_BINARY_DIR}/../${CMAKE_BUILD_TYPE}_out CACHE PATH "Install default 'out' in this directory." FORCE
    )
    else()
  SET(CMAKE_INSTALL_PREFIX
    ${CMAKE_BINARY_DIR}/${CMAKE_BUILD_TYPE}_out CACHE PATH "Install default 'out' in this directory." FORCE
    )
  endif( CMAKE_BINARY_DIR MATCHES ${CMAKE_BUILD_TYPE}_solution\$ )
ENDIF(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
set( BULLET_SOURCE "${CMAKE_CURRENT_SOURCE_DIR}/../../bullet" CACHE STRING "bullet source path "  )
#OPTION( BULLET_SOURCE "bullet source path" "${CMAKE_CURRENT_SOURCE_DIR}/../../bullet/source" )
#OPTION( BUILD_MONOLITHIC "Build as one big library instead of parts" ${BUILD_MONOLITHIC} )
OPTION( BUILD_EXTRAS "Enable building extra projects (dekware, games, ... )" ${BUILD_EXTRAS} )
OPTION( BUILD_TESTS "Enable building test projects" ${BUILD_TESTS} )
OPTION( GENERATOR_BUILD_ALL_NOW "Enable building during the generate" ${GENERATOR_BUILD_ALL_NOW} )
OPTION( GENERATOR_BUILD_INSTALL_NOW "Enable building during the generate" ${GENERATOR_BUILD_INSTALL_NOW} )
OPTION( GENERATOR_BUILD_PACKAGE_NOW "Enable building installable packages (will mostly fail)" ${GENERATOR_BUILD_PACKAGE_NOW} )
OPTION( FORCE_MSVCRT "force using msvcrt instead of current version SDK libraries" ${FORCE_MSVCRT} )
#option( BUILD_UNICODE "Enable building everything as unicode" ${BUILD_UNICODE} )
option( __ANDROID__ "Enable target to android" ${__ANDROID__} )

if( DIRECTX_SDK )
# if directx had to be passed as an environment variable (has spaces)
# then it's already set, and don't have to pass it... otherwise we couldn't pass it.
  STRING( REPLACE "\\" "/" DDIRECTX_SDK -DDIRECTX_SDK=\"${DIRECTX_SDK}\" )
endif( DIRECTX_SDK )

if( BUILD_TESTS )
SET( DBUILD_TESTS -DBUILD_TESTS=${BUILD_TESTS} )
endif( BUILD_TESTS )

if( __CLR__ )
SET( D__CLR__ -D__CLR__=${__CLR__} )
endif( __CLR__ )

if( __LINUX__ )
SET( D__LINUX__ -D__LINUX__=${__LINUX__} )
endif( __LINUX__ )

if( __LINUX64__ )
SET( D__LINUX64__ -D__LINUX64__=${__LINUX64__} )
endif( __LINUX64__ )

if( __ARM__ )
SET( D__ARM__ -D__ARM__=${__ARM__} )
endif( __ARM__ )

if( FORCE_MSVCRT )
SET( DFORCE_MSVCRT -DFORCE_MSVCRT=${FORCE_MSVCRT} )
endif( FORCE_MSVCRT )


SET( SACK_REQUIREMENTS -DNEED_FREETYPE=${NEED_FREETYPE} -DNEED_JPEG=${NEED_JPEG} -DNEED_PNG=${NEED_PNG} -DNEED_ZLIB=${NEED_ZLIB} )
if( UNIX )
#message( "Not win32 (${WIN32}), UNIX(${UNIX}) but MINGW=\"${MINGW}\" maybe android? ; not passing need_externals" )
#set( SACK_REQUIREMENTS -DNEED_UUID=ON )
endif( UNIX )

IF(EXISTS ${BULLET_SOURCE}/CMakeLists.txt )
  if( WATCOM )
  else( WATCOM )
    set( BULLET_ENABLED ON )
    set( DBULLET_SOURCE -DBULLET_SOURCE=${BULLET_SOURCE} )
  endif( WATCOM )
endIF(EXISTS ${BULLET_SOURCE}/CMakeLists.txt )


set( PROJECT core )
set( EXTRA_FLAGS  -DBUILD_EXTRAS=${BUILD_EXTRAS}
			-D__NO_ODBC__=${__NO_ODBC__}
			\"-DTARGET_INSTALL_PREFIX=${TARGET_INSTALL_PREFIX}\"			
			${DDIRECTX_SDK}
        	        ${SACK_REQUIREMENTS} 
                	${DFORCE_MSVCRT} 
	                ${DBUILD_TESTS} 
                        ${DBULLET_SOURCE}
                        ${D__ARM__}
                        ${D__LINUX__}
                        ${D__LINUX64__}
                        ${D__ANDROID__}
                        ${D__CLR__}
                        ${DDX_SDK}
                )

set( PROJECT_BASE_PROJECT ${PROJECT} )
BuildProject( ${PROJECT} sack ${CMAKE_CURRENT_LIST_DIR}/.. SACK_SDK_ROOT_PATH ${EXTRA_FLAGS} )

set( EXTRA_FLAGS -DSACK_SDK_ROOT_PATH=${SACK_SDK_ROOT_PATH} )

#BuildProject( ${PROJECT}.framebuffer sack.nosolution ${CMAKE_CURRENT_LIST_DIR}/../not-exists UNUSED_SACK_SDK_ROOT_PATH ${EXTRA_FLAGS} )
#BuildProject( ${PROJECT}.puregl2 sack.nosolution ${CMAKE_CURRENT_LIST_DIR}/../not-exists UNUSED_SACK_SDK_ROOT_PATH ${EXTRA_FLAGS} )

if( NOT __ANDROID__ )
  # this calls sack_deploy to build cmakepackage
  # on android ended up making a cmake-configured-cmake-script to make this file.
#  Add_custom_command( TARGET Build${PROJECT} 
#	COMMAND ${SACK_SDK_ROOT_PATH}/${BINARY_OUTPUT_DIR}/sack_deploy${CMAKE_EXECUTABLE_SUFFIX} -nr
#	WORKING_DIRECTORY ${SACK_SDK_ROOT_PATH}
#  )                
endif( NOT __ANDROID__ )

if( NOT __CLR__ )
set( PROJECT binary )
set( EXTRA_FLAGS  -DSACK_SDK_ROOT_PATH=${SACK_SDK_ROOT_PATH} ${D__ANDROID__} )
BuildProject( ${PROJECT} sack.binaries ${CMAKE_CURRENT_LIST_DIR}/../binary SACK_BINARY_SDK_ROOT_PATH ${EXTRA_FLAGS} )
add_dependencies( ${LAST_TARGET} ${PROJECT_BASE_PROJECT} )
else( NOT __CLR__ )
message( "Disabled Binaries output for CLR build" )
endif( NOT __CLR__ )


set( PROJECT intershell )
set( EXTRA_FLAGS  -DSACK_SDK_ROOT_PATH=${SACK_SDK_ROOT_PATH} ${D__ANDROID__} )
BuildProject( ${PROJECT} ${PROJECT} ${CMAKE_CURRENT_LIST_DIR}/../src/InterShell.stable INTERSHELL_SDK_ROOT_PATH ${EXTRA_FLAGS} )
add_dependencies( ${LAST_TARGET} ${PROJECT_BASE_PROJECT} binary )

if( NOT __LINUX__ AND NOT __ANDROID__ )
  set( PROJECT intershell_Package )
  set( EXTRA_FLAGS  -DSACK_SDK_ROOT_PATH=${SACK_SDK_ROOT_PATH} ${D__ANDROID__} )
  BuildProject( ${PROJECT} Intershell.Package ${CMAKE_CURRENT_LIST_DIR}/../src/InterShell.stable/package INTERSHELL_PACKAGE_ROOT_PATH ${EXTRA_FLAGS} -DINTERSHELL_SDK_ROOT_PATH=${INTERSHELL_SDK_ROOT_PATH} )
  add_dependencies( ${LAST_TARGET} ${PROJECT_BASE_PROJECT} intershell )
endif( NOT __LINUX__ AND NOT __ANDROID__ )


#set( PROJECT intershell2 )
#set( EXTRA_FLAGS  -DSACK_SDK_ROOT_PATH=${SACK_SDK_ROOT_PATH} ${D__ANDROID__} )
#BuildProject( ${PROJECT} ${PROJECT} ${CMAKE_CURRENT_LIST_DIR}/../src/InterShell INTERSHELL2_SDK_ROOT_PATH ${EXTRA_FLAGS} )
#add_dependencies( ${LAST_TARGET} ${PROJECT_BASE_PROJECT} binary )

if( NOT __ANDROID__ )
  set( PROJECT mercurial_version_tagger )
  set( EXTRA_FLAGS  -DSACK_SDK_ROOT_PATH=${SACK_SDK_ROOT_PATH} ${D__ANDROID__} )
  BuildProject( ${PROJECT} ${PROJECT} ${CMAKE_CURRENT_LIST_DIR}/../src/utils/mercurial_version_tagger MERCURIAL_TAGGER_ROOT_PATH ${EXTRA_FLAGS} )
  add_dependencies( ${LAST_TARGET} ${PROJECT_BASE_PROJECT} )
endif( NOT __ANDROID__ )

IF( BULLET_ENABLED )
  message( "Congratz, you get Bullet projects" )
  if( NOT __ANDROID__ )
    set( PROJECT ball_mixer1 )
    set( EXTRA_FLAGS_MIXER  -DSACK_SDK_ROOT_PATH=${SACK_SDK_ROOT_PATH} -DSACK_BINARY_SDK_ROOT_PATH=${SACK_BINARY_SDK_ROOT_PATH} -DINTERSHELL_SDK_ROOT_PATH=${INTERSHELL_SDK_ROOT_PATH} ${D__ANDROID__} )
    BuildProject( ${PROJECT} ${PROJECT} ${CMAKE_CURRENT_LIST_DIR}/../src/games/ball_mixer INSTALL ${EXTRA_FLAGS_MIXER} )
    add_dependencies( ${LAST_TARGET} ${PROJECT_BASE_PROJECT} binary intershell )
  endif( NOT __ANDROID__ )

  set( PROJECT ball_mixer2 )
  set( EXTRA_FLAGS_MIXER  -DSACK_SDK_ROOT_PATH=${SACK_SDK_ROOT_PATH} -DSACK_BINARY_SDK_ROOT_PATH=${SACK_BINARY_SDK_ROOT_PATH} -DINTERSHELL_SDK_ROOT_PATH=${INTERSHELL_SDK_ROOT_PATH} ${D__ANDROID__} )
  BuildProject( ${PROJECT} ${PROJECT} ${CMAKE_CURRENT_LIST_DIR}/../src/games/ball_mixer2 INSTALL ${EXTRA_FLAGS_MIXER} )
  add_dependencies( ${LAST_TARGET} ${PROJECT_BASE_PROJECT} binary intershell )

ENDIF( BULLET_ENABLED )

if( BUILD_EXTRAS )
  include( ${CMAKE_CURRENT_LIST_DIR}/CMakeLists.extras.txt )
endif( BUILD_EXTRAS )
DEX UI is a handcrafted interface programmed in openFrameworks, running fullscreen underneath a functioning terminal, giving the experience of having a sci fi computer. More.
The project's source code is hosted here for reference. Included are the openFrameworks project source files and shaders, as well as the changes I made to BSPWM (more below). Not included are things like fonts and images.
Note: Dex UI was designed as an experiment or an art piece, not distributable software, so as a result, the code (though I've cleaned it up some) is not the easiest to sort through. Also, because it is no longer in development, I won't be trying to make this work on other people machines - that part's up to you.
What's Happening in the Video Demo
Real desktops revolve around windows, but most sci fi interfaces have these integrated desktops with all sort of animations and no apparent windows. Dex UI aimed to create the illusion of a desktop environment without windows while in reality still operating with windows (in X Windowing System).
To do this, the interface is a single openFrameworks program that handles all the animations. By modifying BSPWM I added a window mode to allow the interface to sit fullscreen beneath any other window. After the introduction animation occurs, a terminal (URXVT) is created above the interface and its size is constrained to the outline drawn in the interface. In short it is two layered windows, but because the windows have no borders or shadows, visually this looks like one integrated interface.
How do I run Dex UI
The code here is for an openFrameworks project. The first step is to get openFrameworks, and get the graphics examples running to confirm it's really working. Then you can start a new project and add the files. Beyond that, fonts and images are not included here, which may be problematic as all of the type work is hard coded.
How I contribute?
This project is here for reference and not in active development, so it is very unlikely I will continue to make changes, or respond to requests to make changes.
Why openFrameworks?
I needed something capable of creating lots of dynamic animations. This could be Processing, pure OpenGL, openFrameworks, etc. Originally my prototypes were in Processing, but for performance reasons I switched to openFrameworks. From what I've learned, many movie interfaces are put together in AfterEffects, so if you wanted to create an interface that did not respond to input, this is also an option.
BSPWM?
BSPWM was what I was working with, but it took some effort to make a window persistently stay fullscreen. The choice of window manager isn't a huge deal, just find something to make the illusion work.
I've also included a .diff file with the changes (to BSPWM commit c49bc92) I made to BSPWM to add what I (for no reason) named power mode. A window can be set to power mode making it stay fullscreen, beneath all other windows across multiple desktops. I've been told a similar effect can be achieved with wmutils, and this might be an easier route.
Font?
Inside the terminal we have Fira Mono, and the rest is United Sans Medium.
Is this working with real data
The keyboard contains some code to work using /dev/input, but the rest still needs to be hooked up to system data. Luckily this is straightforward and only requires replacing the generated data with sampled data.
Why the onscreen Keyboard, does it work with touch screens?
It's there because I think it looks cool. While it doesn't work with touch screens, it might be possible by making the project respond to mouse/touch input.
FlashDB is an ultra-lightweight embedded database that focuses on providing data storage solutions for embedded products. Different from traditional database based on file system, FlashDB combines the features of Flash and has strong performance and reliability. And under the premise of ensuring extremely low resource occupation, the service life of Flash should be extended as much as possible.
Nowadays, there are more and more types of IoT products, and the types and total amount of data generated during operation are also increasing. FlashDB provides a variety of data storage solutions, not only has a small resource footprint, but also has a large storage capacity, which is very suitable for IoT products. The following are the main application scenarios
BLDC motors are entering the hobby community more and more and many great projects have already emerged leveraging their far superior dynamics and power capabilities. BLDC motors have numerous advantages over regular DC motors but they have one big disadvantage, the complexity of control. Even though it has become relatively easy to design and manufacture PCBs and create our own hardware solutions for driving BLDC motors the proper low-cost solutions are yet to come. One of the reasons for this is the apparent complexity of writing the BLDC driving algorithms, Field oriented control (FOC) being an example of one of the most efficient ones. The solutions that can be found on-line are almost exclusively very specific for certain hardware configuration and the microcontroller architecture used. Additionally, most of the efforts at this moment are still channeled towards the high-power applications of the BLDC motors and proper low-cost and low-power FOC supporting boards are very hard to find today and even may not exist.
Please do not hesitate to leave an issue if you have problems/advices/suggestions regarding the code!
Pull requests are welcome, but let's first discuss them in community forum!
If you'd like to contribute to this project but you are not very familiar with github, don't worry, let us know either by posting at the community forum , by posting a github issue or at our discord server.
If you are familiar, we accept pull requests to the dev branch!
For all the questions regarding the potential implementation, applications, supported hardware and similar please visit our community forum or our discord server.
It is always helpful to hear the stories/problems/suggestions of people implementing the code and you might find a lot of answered questions there already!
We are very happy that SimpleFOClibrary has been used as a component of several research project and has made its way to several scientific papers. We are hoping that this trend is going to continue as the project matures and becomes more robust! A short resume paper about SimpleFOC has been published in the Journal of Open Source Software:
SimpleFOC: A Field Oriented Control (FOC) Library for Controlling Brushless Direct Current (BLDC) and Stepper Motors.
A. Skuric, HS. Bank, R. Unger, O. Williams, D. González-Reyes
Journal of Open Source Software, 7(74), 4232, https://doi.org/10.21105/joss.04232
If you are interested in citing SimpleFOClibrary or some other component of SimpleFOCproject in your research, we suggest you to cite our paper
These are the GNU core utilities.  This package is the union of
the GNU fileutils, sh-utils, and textutils packages.
Most of these programs have significant advantages over their Unix
counterparts, such as greater speed, additional options, and fewer
arbitrary limits.

The programs that can be built with this package are:

  [ arch b2sum base32 base64 basename basenc cat chcon chgrp chmod chown
  chroot cksum comm coreutils cp csplit cut date dd df dir dircolors dirname
  du echo env expand expr factor false fmt fold groups head hostid hostname
  id install join kill link ln logname ls md5sum mkdir mkfifo mknod mktemp
  mv nice nl nohup nproc numfmt od paste pathchk pinky pr printenv printf ptx
  pwd readlink realpath rm rmdir runcon seq sha1sum sha224sum sha256sum
  sha384sum sha512sum shred shuf sleep sort split stat stdbuf stty sum sync
  tac tail tee test timeout touch tr true truncate tsort tty uname unexpand
  uniq unlink uptime users vdir wc who whoami yes

See the file NEWS for a list of major changes in the current release.

If you obtained this file as part of a "git clone", then see the
README-hacking file.  If this file came to you as part of a tar archive,
then see the file INSTALL for general compilation and installation
instructions, or README-install for system and coreutils specific instructions.

Like the rest of the GNU system, these programs mostly conform to
POSIX, with BSD and other extensions.  For closer conformance, or
conformance to a particular POSIX version, set the POSIXLY_CORRECT
and the _POSIX2_VERSION environment variables, as described in
the documentation under "Standards conformance".

The ls, dir, and vdir commands are all separate executables instead of
one program that checks argv[0] because people often rename these
programs to things like gls, gnuls, l, etc.  Renaming a program
file shouldn't affect how it operates, so that people can get the
behavior they want with whatever name they want.

Special thanks to Paul Eggert, Brian Matthews, Bruce Evans, Karl Berry,
Kaveh Ghazi, and François Pinard for help with debugging and porting
these programs.  Many thanks to all of the people who have taken the
time to submit problem reports and fixes.  All contributed changes are
attributed in the commit logs.

And thanks to the following people who have provided accounts for
portability testing on many different types of systems: Bob Proulx,
Christian Robert, François Pinard, Greg McGary, Harlan Stenn,
Joel N. Weber, Mark D. Roth, Matt Schalit, Nelson H. F. Beebe,
Réjean Payette, Sam Tardieu.

Thanks to Michael Stone for inflicting test releases of this package
on Debian's unstable distribution, and to all the kind folks who used
that distribution and found and reported bugs.

Note that each man page is now automatically generated from a template
and from the corresponding --help usage message.  Patches to the template
files (man/*.x) are welcome.  However, the authoritative documentation
is in texinfo form in the doc directory.


***************
Feature requests:
---------------

If you would like to add a new feature, please try to get some sort of
consensus that it is a worthwhile change.  One way to do that is to send
mail to coreutils@gnu.org including as much description and justification
as you can.  Based on the feedback that generates, you may be able to
convince us that it's worth adding.  Please also consult the list of
previously discussed but ultimately rejected feature requests at:
https://www.gnu.org/software/coreutils/rejected_requests.html


***************
Reporting bugs:
---------------

Send bug reports, questions, comments, etc. to bug-coreutils@gnu.org.
To suggest a patch, see the files README-hacking and HACKING for tips.

All of these programs except 'test' recognize the '--version' option.
When reporting bugs, please include in the subject line both the package
name/version and the name of the program for which you found a problem.

If you have a problem with 'sort', try running 'sort --debug', as it
can often help find and fix problems without having to wait for an
answer to a bug report.  If the debug output does not suffice to fix
the problem on your own, please compress and attach it to the rest of
your bug report.

IMPORTANT: if you take the time to report a test failure,
please be sure to include the output of running 'make check'
in verbose mode for each failing test.  For example,
if the test that fails is tests/df/df-P.sh, then you would
run this command:

  make check TESTS=tests/df/df-P.sh VERBOSE=yes SUBDIRS=. >> log 2>&1

For some tests, particularly perl tests, you can get even more detail by adding
DEBUG=yes. Then include the contents of the file 'log' in your bug report.


***************************************

There are many tests, but nowhere near as many as we need.
Additions and corrections are very welcome.

If you see a problem that you've already reported, feel free to re-report
it -- it won't bother us to get a reminder.  Besides, the more messages we
get regarding a particular problem the sooner it'll be fixed -- usually.
If you sent a complete patch and, after a couple weeks you haven't
received any acknowledgement, please ping us.  A complete patch includes
a well-written ChangeLog entry, unified (diff -u format) diffs relative
to the most recent test release (or, better, relative to the latest
sources in the public repository), an explanation for why the patch is
necessary or useful, and if at all possible, enough information to
reproduce whatever problem prompted it.  Plus, you'll earn lots of
karma if you include a test case to exercise any bug(s) you fix.
Here are instructions for checking out the latest development sources:

  https://savannah.gnu.org/git/?group=coreutils

For general documentation on the coding and usage standards
this distribution follows, see the GNU Coding Standards at:
https://www.gnu.org/prep/standards/

For any copyright year range specified as YYYY-ZZZZ in this package
note that the range specifies every single year in that closed interval.

Please see the file COPYING for copying conditions.

========================================================================

Copyright (C) 1998-2024 Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
Texts.  A copy of the license is included in the "GNU Free
Documentation License" file as part of this distribution.

Adafruit_ILI9341 ORIGINAL LIBRARY HEADER:
vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvStartvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
  This is our library for the Adafruit  ILI9341 Breakout and Shield
  ----> http://www.adafruit.com/products/1651

  Check out the links above for our tutorials and wiring diagrams
  These displays use SPI to communicate, 4 or 5 pins are required to
  interface (RST is optional)
  Adafruit invests time and resources providing this open source code,
  please support Adafruit and open-source hardware by purchasing
  products from Adafruit!

  Written by Limor Fried/Ladyada for Adafruit Industries.
  MIT license, all text above must be included in any redistribution
  
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^End^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Adafruit_GFX ORIGINAL LIBRARY LICENSE:
vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvStartvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

Software License Agreement (BSD License)

Copyright (c) 2012 Adafruit Industries.  All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

- Redistributions of source code must retain the above copyright notice,
  this list of conditions and the following disclaimer.
- Redistributions in binary form must reproduce the above copyright notice,
  this list of conditions and the following disclaimer in the documentation
  and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^End^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

TFT_eSPI ORIGINAL LIBRARY LICENSE:
vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvStartvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
Software License Agreement (FreeBSD License)

Copyright (c) 2020 Bodmer (https://github.com/Bodmer)

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

The views and conclusions contained in the software and documentation are those
of the authors and should not be interpreted as representing official policies,
either expressed or implied, of the FreeBSD Project.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^End^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

LovyanGFX ORIGINAL LIBRARY LICENSE:
vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvStartvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
Software License Agreement (FreeBSD License)

Copyright (c) 2020 lovyan03 (https://github.com/lovyan03)

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

The views and conclusions contained in the software and documentation are those
of the authors and should not be interpreted as representing official policies,
either expressed or implied, of the FreeBSD Project.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^End^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Copyright (c) 2013-2015 Steve Luken, www.linkedin.com/in/steveluken

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
if( ${CMAKE_VERSION} VERSION_GREATER "3.11.0" )
cmake_policy( SET CMP0077 NEW )
endif( ${CMAKE_VERSION} VERSION_GREATER "3.11.0" )
set_property(GLOBAL PROPERTY USE_FOLDERS On)
cmake_minimum_required(VERSION 3.20)

set(CMAKE_BUILD_TYPE "debug" CACHE STRING "Set build type")

set( CMAKE_BUILD_RPATH_USE_ORIGIN ON )
set( CMAKE_BUILD_WITH_INSTALL_RPATH ON )
set( CMAKE_INSTALL_RPATH_USE_LINK_PATH OFF )
set( CMAKE_SKIP_INSTALL_RPATH OFF )

if( NOT PROJECT_NAME )
project( Sack.all )
endif( NOT PROJECT_NAME )

# include this so default output paths get defined.
include( ${CMAKE_CURRENT_SOURCE_DIR}/../makefiles/cmake/DefaultInstall.cmake )

set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS
			${CMAKE_CONFIGURATION_TYPES} Debug Release RelWithDebInfo MinSizeRel )

include( ${CMAKE_CURRENT_LIST_DIR}/CMakeExtBuild.txt )

if( CMAKE_HOST_SYSTEM_NAME STREQUAL "Android" )
	DEFINE_DEFAULT( __ANDROID__ ON )
else( CMAKE_HOST_SYSTEM_NAME STREQUAL "Android")
	DEFINE_DEFAULT( __ANDROID__ OFF )
endif( CMAKE_HOST_SYSTEM_NAME STREQUAL "Android" )

if( NOT TARGET_INSTALL_PREFIX )
  SET(TARGET_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX} CACHE STRING  "Used to compile as installation path" )
endif( NOT TARGET_INSTALL_PREFIX )

if( __ANDROID__ )
   set( __NO_ODBC__ 1 )  # someday port unixodbc library?  But then the mysql driver needs to be ported
   set( __LINUX__ 1 )    # build as if it's linux
   DEFINE_DEFAULT( __ARM__ ON )
   set( D__ANDROID__ "-D__ANDROID__=${__ANDROID__} -DANDROID_DIR=${ANDROID_DIR} -DANDROID_NDK_VERSION=${ANDROID_NDK_VERSION}" )
   DEFINE_DEFAULT( BUILD_EXTRAS ON )
else( __ANDROID_ )
   DEFINE_DEFAULT( __ARM__ OFF )
   DEFINE_DEFAULT( BUILD_EXTRAS OFF )
endif( __ANDROID__ )

if( WIN32 OR __ANDROID__ )
DEFINE_DEFAULT( NEED_FREETYPE ON )
DEFINE_DEFAULT( NEED_JPEG ON )
DEFINE_DEFAULT( NEED_PNG ON )
DEFINE_DEFAULT( NEED_ZLIB ON )
DEFINE_DEFAULT( NEED_UUID OFF )
else( WIN32 OR __ANDROID__ )
DEFINE_DEFAULT( NEED_FREETYPE OFF )
DEFINE_DEFAULT( NEED_JPEG OFF )
DEFINE_DEFAULT( NEED_PNG OFF )
DEFINE_DEFAULT( NEED_ZLIB OFF )
set( __NO_ODBC__ 0 )  # someday port unixodbc library?  But then the mysql driver needs to be ported
set( __LINUX__ ON )
if(CMAKE_SIZEOF_VOID_P EQUAL 8)
  set( __LINUX64__ ON)
endif()
if( EXISTS /usr/include/uuid/uuid.h )
DEFINE_DEFAULT( NEED_UUID OFF )
else()
DEFINE_DEFAULT( NEED_UUID ON )
endif()
endif( WIN32 OR __ANDROID__ )

DEFINE_DEFAULT( BUILD_TESTS OFF )
DEFINE_DEFAULT( FORCE_MSVCRT  OFF )
DEFINE_DEFAULT( GENERATOR_BUILD_ALL_NOW  OFF )
DEFINE_DEFAULT( GENERATOR_BUILD_INSTALL_NOW  OFF )
DEFINE_DEFAULT( GENERATOR_BUILD_PACKAGE_NOW  OFF )
DEFINE_DEFAULT( DIRECTX_SDK "" )
DEFINE_DEFAULT( __CLR__ 0 )

IF(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
  if( CMAKE_BINARY_DIR MATCHES ${CMAKE_BUILD_TYPE}_solution\$ )
  SET(CMAKE_INSTALL_PREFIX
    ${CMAKE_BINARY_DIR}/../${CMAKE_BUILD_TYPE}_out CACHE PATH "Install default 'out' in this directory." FORCE
    )
    else()
  SET(CMAKE_INSTALL_PREFIX
    ${CMAKE_BINARY_DIR}/${CMAKE_BUILD_TYPE}_out CACHE PATH "Install default 'out' in this directory." FORCE
    )
  endif( CMAKE_BINARY_DIR MATCHES ${CMAKE_BUILD_TYPE}_solution\$ )
ENDIF(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
set( BULLET_SOURCE "${CMAKE_CURRENT_SOURCE_DIR}/../../bullet" CACHE STRING "bullet source path "  )
#OPTION( BULLET_SOURCE "bullet source path" "${CMAKE_CURRENT_SOURCE_DIR}/../../bullet/source" )
#OPTION( BUILD_MONOLITHIC "Build as one big library instead of parts" ${BUILD_MONOLITHIC} )
OPTION( BUILD_EXTRAS "Enable building extra projects (dekware, games, ... )" ${BUILD_EXTRAS} )
OPTION( BUILD_TESTS "Enable building test projects" ${BUILD_TESTS} )
OPTION( GENERATOR_BUILD_ALL_NOW "Enable building during the generate" ${GENERATOR_BUILD_ALL_NOW} )
OPTION( GENERATOR_BUILD_INSTALL_NOW "Enable building during the generate" ${GENERATOR_BUILD_INSTALL_NOW} )
OPTION( GENERATOR_BUILD_PACKAGE_NOW "Enable building installable packages (will mostly fail)" ${GENERATOR_BUILD_PACKAGE_NOW} )
OPTION( FORCE_MSVCRT "force using msvcrt instead of current version SDK libraries" ${FORCE_MSVCRT} )
#option( BUILD_UNICODE "Enable building everything as unicode" ${BUILD_UNICODE} )
option( __ANDROID__ "Enable target to android" ${__ANDROID__} )

if( DIRECTX_SDK )
# if directx had to be passed as an environment variable (has spaces)
# then it's already set, and don't have to pass it... otherwise we couldn't pass it.
  STRING( REPLACE "\\" "/" DDIRECTX_SDK -DDIRECTX_SDK=\"${DIRECTX_SDK}\" )
endif( DIRECTX_SDK )

if( BUILD_TESTS )
SET( DBUILD_TESTS -DBUILD_TESTS=${BUILD_TESTS} )
endif( BUILD_TESTS )

if( __CLR__ )
SET( D__CLR__ -D__CLR__=${__CLR__} )
endif( __CLR__ )

if( __LINUX__ )
SET( D__LINUX__ -D__LINUX__=${__LINUX__} )
endif( __LINUX__ )

if( __LINUX64__ )
SET( D__LINUX64__ -D__LINUX64__=${__LINUX64__} )
endif( __LINUX64__ )

if( __ARM__ )
SET( D__ARM__ -D__ARM__=${__ARM__} )
endif( __ARM__ )

if( FORCE_MSVCRT )
SET( DFORCE_MSVCRT -DFORCE_MSVCRT=${FORCE_MSVCRT} )
endif( FORCE_MSVCRT )


SET( SACK_REQUIREMENTS -DNEED_FREETYPE=${NEED_FREETYPE} -DNEED_JPEG=${NEED_JPEG} -DNEED_PNG=${NEED_PNG} -DNEED_ZLIB=${NEED_ZLIB} )
if( UNIX )
#message( "Not win32 (${WIN32}), UNIX(${UNIX}) but MINGW=\"${MINGW}\" maybe android? ; not passing need_externals" )
#set( SACK_REQUIREMENTS -DNEED_UUID=ON )
endif( UNIX )

IF(EXISTS ${BULLET_SOURCE}/CMakeLists.txt )
  if( WATCOM )
  else( WATCOM )
    set( BULLET_ENABLED ON )
    set( DBULLET_SOURCE -DBULLET_SOURCE=${BULLET_SOURCE} )
  endif( WATCOM )
endIF(EXISTS ${BULLET_SOURCE}/CMakeLists.txt )


set( PROJECT core )
set( EXTRA_FLAGS  -DBUILD_EXTRAS=${BUILD_EXTRAS}
			-D__NO_ODBC__=${__NO_ODBC__}
			\"-DTARGET_INSTALL_PREFIX=${TARGET_INSTALL_PREFIX}\"			
			${DDIRECTX_SDK}
        	        ${SACK_REQUIREMENTS} 
                	${DFORCE_MSVCRT} 
	                ${DBUILD_TESTS} 
                        ${DBULLET_SOURCE}
                        ${D__ARM__}
                        ${D__LINUX__}
                        ${D__LINUX64__}
                        ${D__ANDROID__}
                        ${D__CLR__}
                        ${DDX_SDK}
                )

set( PROJECT_BASE_PROJECT ${PROJECT} )
BuildProject( ${PROJECT} sack ${CMAKE_CURRENT_LIST_DIR}/.. SACK_SDK_ROOT_PATH ${EXTRA_FLAGS} )

set( EXTRA_FLAGS -DSACK_SDK_ROOT_PATH=${SACK_SDK_ROOT_PATH} )

#BuildProject( ${PROJECT}.framebuffer sack.nosolution ${CMAKE_CURRENT_LIST_DIR}/../not-exists UNUSED_SACK_SDK_ROOT_PATH ${EXTRA_FLAGS} )
#BuildProject( ${PROJECT}.puregl2 sack.nosolution ${CMAKE_CURRENT_LIST_DIR}/../not-exists UNUSED_SACK_SDK_ROOT_PATH ${EXTRA_FLAGS} )

if( NOT __ANDROID__ )
  # this calls sack_deploy to build cmakepackage
  # on android ended up making a cmake-configured-cmake-script to make this file.
#  Add_custom_command( TARGET Build${PROJECT} 
#	COMMAND ${SACK_SDK_ROOT_PATH}/${BINARY_OUTPUT_DIR}/sack_deploy${CMAKE_EXECUTABLE_SUFFIX} -nr
#	WORKING_DIRECTORY ${SACK_SDK_ROOT_PATH}
#  )                
endif( NOT __ANDROID__ )

if( NOT __CLR__ )
set( PROJECT binary )
set( EXTRA_FLAGS  -DSACK_SDK_ROOT_PATH=${SACK_SDK_ROOT_PATH} ${D__ANDROID__} )
BuildProject( ${PROJECT} sack.binaries ${CMAKE_CURRENT_LIST_DIR}/../binary SACK_BINARY_SDK_ROOT_PATH ${EXTRA_FLAGS} )
add_dependencies( ${LAST_TARGET} ${PROJECT_BASE_PROJECT} )
else( NOT __CLR__ )
message( "Disabled Binaries output for CLR build" )
endif( NOT __CLR__ )


set( PROJECT intershell )
set( EXTRA_FLAGS  -DSACK_SDK_ROOT_PATH=${SACK_SDK_ROOT_PATH} ${D__ANDROID__} )
BuildProject( ${PROJECT} ${PROJECT} ${CMAKE_CURRENT_LIST_DIR}/../src/InterShell.stable INTERSHELL_SDK_ROOT_PATH ${EXTRA_FLAGS} )
add_dependencies( ${LAST_TARGET} ${PROJECT_BASE_PROJECT} binary )

if( NOT __LINUX__ AND NOT __ANDROID__ )
  set( PROJECT intershell_Package )
  set( EXTRA_FLAGS  -DSACK_SDK_ROOT_PATH=${SACK_SDK_ROOT_PATH} ${D__ANDROID__} )
  BuildProject( ${PROJECT} Intershell.Package ${CMAKE_CURRENT_LIST_DIR}/../src/InterShell.stable/package INTERSHELL_PACKAGE_ROOT_PATH ${EXTRA_FLAGS} -DINTERSHELL_SDK_ROOT_PATH=${INTERSHELL_SDK_ROOT_PATH} )
  add_dependencies( ${LAST_TARGET} ${PROJECT_BASE_PROJECT} intershell )
endif( NOT __LINUX__ AND NOT __ANDROID__ )


#set( PROJECT intershell2 )
#set( EXTRA_FLAGS  -DSACK_SDK_ROOT_PATH=${SACK_SDK_ROOT_PATH} ${D__ANDROID__} )
#BuildProject( ${PROJECT} ${PROJECT} ${CMAKE_CURRENT_LIST_DIR}/../src/InterShell INTERSHELL2_SDK_ROOT_PATH ${EXTRA_FLAGS} )
#add_dependencies( ${LAST_TARGET} ${PROJECT_BASE_PROJECT} binary )

if( NOT __ANDROID__ )
  set( PROJECT mercurial_version_tagger )
  set( EXTRA_FLAGS  -DSACK_SDK_ROOT_PATH=${SACK_SDK_ROOT_PATH} ${D__ANDROID__} )
  BuildProject( ${PROJECT} ${PROJECT} ${CMAKE_CURRENT_LIST_DIR}/../src/utils/mercurial_version_tagger MERCURIAL_TAGGER_ROOT_PATH ${EXTRA_FLAGS} )
  add_dependencies( ${LAST_TARGET} ${PROJECT_BASE_PROJECT} )
endif( NOT __ANDROID__ )

IF( BULLET_ENABLED )
  message( "Congratz, you get Bullet projects" )
  if( NOT __ANDROID__ )
    set( PROJECT ball_mixer1 )
    set( EXTRA_FLAGS_MIXER  -DSACK_SDK_ROOT_PATH=${SACK_SDK_ROOT_PATH} -DSACK_BINARY_SDK_ROOT_PATH=${SACK_BINARY_SDK_ROOT_PATH} -DINTERSHELL_SDK_ROOT_PATH=${INTERSHELL_SDK_ROOT_PATH} ${D__ANDROID__} )
    BuildProject( ${PROJECT} ${PROJECT} ${CMAKE_CURRENT_LIST_DIR}/../src/games/ball_mixer INSTALL ${EXTRA_FLAGS_MIXER} )
    add_dependencies( ${LAST_TARGET} ${PROJECT_BASE_PROJECT} binary intershell )
  endif( NOT __ANDROID__ )

  set( PROJECT ball_mixer2 )
  set( EXTRA_FLAGS_MIXER  -DSACK_SDK_ROOT_PATH=${SACK_SDK_ROOT_PATH} -DSACK_BINARY_SDK_ROOT_PATH=${SACK_BINARY_SDK_ROOT_PATH} -DINTERSHELL_SDK_ROOT_PATH=${INTERSHELL_SDK_ROOT_PATH} ${D__ANDROID__} )
  BuildProject( ${PROJECT} ${PROJECT} ${CMAKE_CURRENT_LIST_DIR}/../src/games/ball_mixer2 INSTALL ${EXTRA_FLAGS_MIXER} )
  add_dependencies( ${LAST_TARGET} ${PROJECT_BASE_PROJECT} binary intershell )

ENDIF( BULLET_ENABLED )

if( BUILD_EXTRAS )
  include( ${CMAKE_CURRENT_LIST_DIR}/CMakeLists.extras.txt )
endif( BUILD_EXTRAS )
DEX UI is a handcrafted interface programmed in openFrameworks, running fullscreen underneath a functioning terminal, giving the experience of having a sci fi computer. More.
The project's source code is hosted here for reference. Included are the openFrameworks project source files and shaders, as well as the changes I made to BSPWM (more below). Not included are things like fonts and images.
Note: Dex UI was designed as an experiment or an art piece, not distributable software, so as a result, the code (though I've cleaned it up some) is not the easiest to sort through. Also, because it is no longer in development, I won't be trying to make this work on other people machines - that part's up to you.
What's Happening in the Video Demo
Real desktops revolve around windows, but most sci fi interfaces have these integrated desktops with all sort of animations and no apparent windows. Dex UI aimed to create the illusion of a desktop environment without windows while in reality still operating with windows (in X Windowing System).
To do this, the interface is a single openFrameworks program that handles all the animations. By modifying BSPWM I added a window mode to allow the interface to sit fullscreen beneath any other window. After the introduction animation occurs, a terminal (URXVT) is created above the interface and its size is constrained to the outline drawn in the interface. In short it is two layered windows, but because the windows have no borders or shadows, visually this looks like one integrated interface.
How do I run Dex UI
The code here is for an openFrameworks project. The first step is to get openFrameworks, and get the graphics examples running to confirm it's really working. Then you can start a new project and add the files. Beyond that, fonts and images are not included here, which may be problematic as all of the type work is hard coded.
How I contribute?
This project is here for reference and not in active development, so it is very unlikely I will continue to make changes, or respond to requests to make changes.
Why openFrameworks?
I needed something capable of creating lots of dynamic animations. This could be Processing, pure OpenGL, openFrameworks, etc. Originally my prototypes were in Processing, but for performance reasons I switched to openFrameworks. From what I've learned, many movie interfaces are put together in AfterEffects, so if you wanted to create an interface that did not respond to input, this is also an option.
BSPWM?
BSPWM was what I was working with, but it took some effort to make a window persistently stay fullscreen. The choice of window manager isn't a huge deal, just find something to make the illusion work.
I've also included a .diff file with the changes (to BSPWM commit c49bc92) I made to BSPWM to add what I (for no reason) named power mode. A window can be set to power mode making it stay fullscreen, beneath all other windows across multiple desktops. I've been told a similar effect can be achieved with wmutils, and this might be an easier route.
Font?
Inside the terminal we have Fira Mono, and the rest is United Sans Medium.
Is this working with real data
The keyboard contains some code to work using /dev/input, but the rest still needs to be hooked up to system data. Luckily this is straightforward and only requires replacing the generated data with sampled data.
Why the onscreen Keyboard, does it work with touch screens?
It's there because I think it looks cool. While it doesn't work with touch screens, it might be possible by making the project respond to mouse/touch input.
FlashDB is an ultra-lightweight embedded database that focuses on providing data storage solutions for embedded products. Different from traditional database based on file system, FlashDB combines the features of Flash and has strong performance and reliability. And under the premise of ensuring extremely low resource occupation, the service life of Flash should be extended as much as possible.
Nowadays, there are more and more types of IoT products, and the types and total amount of data generated during operation are also increasing. FlashDB provides a variety of data storage solutions, not only has a small resource footprint, but also has a large storage capacity, which is very suitable for IoT products. The following are the main application scenarios
BLDC motors are entering the hobby community more and more and many great projects have already emerged leveraging their far superior dynamics and power capabilities. BLDC motors have numerous advantages over regular DC motors but they have one big disadvantage, the complexity of control. Even though it has become relatively easy to design and manufacture PCBs and create our own hardware solutions for driving BLDC motors the proper low-cost solutions are yet to come. One of the reasons for this is the apparent complexity of writing the BLDC driving algorithms, Field oriented control (FOC) being an example of one of the most efficient ones. The solutions that can be found on-line are almost exclusively very specific for certain hardware configuration and the microcontroller architecture used. Additionally, most of the efforts at this moment are still channeled towards the high-power applications of the BLDC motors and proper low-cost and low-power FOC supporting boards are very hard to find today and even may not exist.
Please do not hesitate to leave an issue if you have problems/advices/suggestions regarding the code!
Pull requests are welcome, but let's first discuss them in community forum!
If you'd like to contribute to this project but you are not very familiar with github, don't worry, let us know either by posting at the community forum , by posting a github issue or at our discord server.
If you are familiar, we accept pull requests to the dev branch!
For all the questions regarding the potential implementation, applications, supported hardware and similar please visit our community forum or our discord server.
It is always helpful to hear the stories/problems/suggestions of people implementing the code and you might find a lot of answered questions there already!
We are very happy that SimpleFOClibrary has been used as a component of several research project and has made its way to several scientific papers. We are hoping that this trend is going to continue as the project matures and becomes more robust! A short resume paper about SimpleFOC has been published in the Journal of Open Source Software:
SimpleFOC: A Field Oriented Control (FOC) Library for Controlling Brushless Direct Current (BLDC) and Stepper Motors.
A. Skuric, HS. Bank, R. Unger, O. Williams, D. González-Reyes
Journal of Open Source Software, 7(74), 4232, https://doi.org/10.21105/joss.04232
If you are interested in citing SimpleFOClibrary or some other component of SimpleFOCproject in your research, we suggest you to cite our paper
These are the GNU core utilities.  This package is the union of
the GNU fileutils, sh-utils, and textutils packages.
Most of these programs have significant advantages over their Unix
counterparts, such as greater speed, additional options, and fewer
arbitrary limits.

The programs that can be built with this package are:

  [ arch b2sum base32 base64 basename basenc cat chcon chgrp chmod chown
  chroot cksum comm coreutils cp csplit cut date dd df dir dircolors dirname
  du echo env expand expr factor false fmt fold groups head hostid hostname
  id install join kill link ln logname ls md5sum mkdir mkfifo mknod mktemp
  mv nice nl nohup nproc numfmt od paste pathchk pinky pr printenv printf ptx
  pwd readlink realpath rm rmdir runcon seq sha1sum sha224sum sha256sum
  sha384sum sha512sum shred shuf sleep sort split stat stdbuf stty sum sync
  tac tail tee test timeout touch tr true truncate tsort tty uname unexpand
  uniq unlink uptime users vdir wc who whoami yes

See the file NEWS for a list of major changes in the current release.

If you obtained this file as part of a "git clone", then see the
README-hacking file.  If this file came to you as part of a tar archive,
then see the file INSTALL for general compilation and installation
instructions, or README-install for system and coreutils specific instructions.

Like the rest of the GNU system, these programs mostly conform to
POSIX, with BSD and other extensions.  For closer conformance, or
conformance to a particular POSIX version, set the POSIXLY_CORRECT
and the _POSIX2_VERSION environment variables, as described in
the documentation under "Standards conformance".

The ls, dir, and vdir commands are all separate executables instead of
one program that checks argv[0] because people often rename these
programs to things like gls, gnuls, l, etc.  Renaming a program
file shouldn't affect how it operates, so that people can get the
behavior they want with whatever name they want.

Special thanks to Paul Eggert, Brian Matthews, Bruce Evans, Karl Berry,
Kaveh Ghazi, and François Pinard for help with debugging and porting
these programs.  Many thanks to all of the people who have taken the
time to submit problem reports and fixes.  All contributed changes are
attributed in the commit logs.

And thanks to the following people who have provided accounts for
portability testing on many different types of systems: Bob Proulx,
Christian Robert, François Pinard, Greg McGary, Harlan Stenn,
Joel N. Weber, Mark D. Roth, Matt Schalit, Nelson H. F. Beebe,
Réjean Payette, Sam Tardieu.

Thanks to Michael Stone for inflicting test releases of this package
on Debian's unstable distribution, and to all the kind folks who used
that distribution and found and reported bugs.

Note that each man page is now automatically generated from a template
and from the corresponding --help usage message.  Patches to the template
files (man/*.x) are welcome.  However, the authoritative documentation
is in texinfo form in the doc directory.


***************
Feature requests:
---------------

If you would like to add a new feature, please try to get some sort of
consensus that it is a worthwhile change.  One way to do that is to send
mail to coreutils@gnu.org including as much description and justification
as you can.  Based on the feedback that generates, you may be able to
convince us that it's worth adding.  Please also consult the list of
previously discussed but ultimately rejected feature requests at:
https://www.gnu.org/software/coreutils/rejected_requests.html


***************
Reporting bugs:
---------------

Send bug reports, questions, comments, etc. to bug-coreutils@gnu.org.
To suggest a patch, see the files README-hacking and HACKING for tips.

All of these programs except 'test' recognize the '--version' option.
When reporting bugs, please include in the subject line both the package
name/version and the name of the program for which you found a problem.

If you have a problem with 'sort', try running 'sort --debug', as it
can often help find and fix problems without having to wait for an
answer to a bug report.  If the debug output does not suffice to fix
the problem on your own, please compress and attach it to the rest of
your bug report.

IMPORTANT: if you take the time to report a test failure,
please be sure to include the output of running 'make check'
in verbose mode for each failing test.  For example,
if the test that fails is tests/df/df-P.sh, then you would
run this command:

  make check TESTS=tests/df/df-P.sh VERBOSE=yes SUBDIRS=. >> log 2>&1

For some tests, particularly perl tests, you can get even more detail by adding
DEBUG=yes. Then include the contents of the file 'log' in your bug report.


***************************************

There are many tests, but nowhere near as many as we need.
Additions and corrections are very welcome.

If you see a problem that you've already reported, feel free to re-report
it -- it won't bother us to get a reminder.  Besides, the more messages we
get regarding a particular problem the sooner it'll be fixed -- usually.
If you sent a complete patch and, after a couple weeks you haven't
received any acknowledgement, please ping us.  A complete patch includes
a well-written ChangeLog entry, unified (diff -u format) diffs relative
to the most recent test release (or, better, relative to the latest
sources in the public repository), an explanation for why the patch is
necessary or useful, and if at all possible, enough information to
reproduce whatever problem prompted it.  Plus, you'll earn lots of
karma if you include a test case to exercise any bug(s) you fix.
Here are instructions for checking out the latest development sources:

  https://savannah.gnu.org/git/?group=coreutils

For general documentation on the coding and usage standards
this distribution follows, see the GNU Coding Standards at:
https://www.gnu.org/prep/standards/

For any copyright year range specified as YYYY-ZZZZ in this package
note that the range specifies every single year in that closed interval.

Please see the file COPYING for copying conditions.

========================================================================

Copyright (C) 1998-2024 Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
Texts.  A copy of the license is included in the "GNU Free
Documentation License" file as part of this distribution.

Adafruit_ILI9341 ORIGINAL LIBRARY HEADER:
vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvStartvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
  This is our library for the Adafruit  ILI9341 Breakout and Shield
  ----> http://www.adafruit.com/products/1651

  Check out the links above for our tutorials and wiring diagrams
  These displays use SPI to communicate, 4 or 5 pins are required to
  interface (RST is optional)
  Adafruit invests time and resources providing this open source code,
  please support Adafruit and open-source hardware by purchasing
  products from Adafruit!

  Written by Limor Fried/Ladyada for Adafruit Industries.
  MIT license, all text above must be included in any redistribution
  
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^End^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Adafruit_GFX ORIGINAL LIBRARY LICENSE:
vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvStartvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

Software License Agreement (BSD License)

Copyright (c) 2012 Adafruit Industries.  All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

- Redistributions of source code must retain the above copyright notice,
  this list of conditions and the following disclaimer.
- Redistributions in binary form must reproduce the above copyright notice,
  this list of conditions and the following disclaimer in the documentation
  and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^End^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

TFT_eSPI ORIGINAL LIBRARY LICENSE:
vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvStartvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
Software License Agreement (FreeBSD License)

Copyright (c) 2020 Bodmer (https://github.com/Bodmer)

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

The views and conclusions contained in the software and documentation are those
of the authors and should not be interpreted as representing official policies,
either expressed or implied, of the FreeBSD Project.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^End^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

LovyanGFX ORIGINAL LIBRARY LICENSE:
vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvStartvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
Software License Agreement (FreeBSD License)

Copyright (c) 2020 lovyan03 (https://github.com/lovyan03)

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

The views and conclusions contained in the software and documentation are those
of the authors and should not be interpreted as representing official policies,
either expressed or implied, of the FreeBSD Project.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^End^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Copyright (c) 2013-2015 Steve Luken, www.linkedin.com/in/steveluken

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
if( ${CMAKE_VERSION} VERSION_GREATER "3.11.0" )
cmake_policy( SET CMP0077 NEW )
endif( ${CMAKE_VERSION} VERSION_GREATER "3.11.0" )
set_property(GLOBAL PROPERTY USE_FOLDERS On)
cmake_minimum_required(VERSION 3.20)

set(CMAKE_BUILD_TYPE "debug" CACHE STRING "Set build type")

set( CMAKE_BUILD_RPATH_USE_ORIGIN ON )
set( CMAKE_BUILD_WITH_INSTALL_RPATH ON )
set( CMAKE_INSTALL_RPATH_USE_LINK_PATH OFF )
set( CMAKE_SKIP_INSTALL_RPATH OFF )

if( NOT PROJECT_NAME )
project( Sack.all )
endif( NOT PROJECT_NAME )

# include this so default output paths get defined.
include( ${CMAKE_CURRENT_SOURCE_DIR}/../makefiles/cmake/DefaultInstall.cmake )

set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS
			${CMAKE_CONFIGURATION_TYPES} Debug Release RelWithDebInfo MinSizeRel )

include( ${CMAKE_CURRENT_LIST_DIR}/CMakeExtBuild.txt )

if( CMAKE_HOST_SYSTEM_NAME STREQUAL "Android" )
	DEFINE_DEFAULT( __ANDROID__ ON )
else( CMAKE_HOST_SYSTEM_NAME STREQUAL "Android")
	DEFINE_DEFAULT( __ANDROID__ OFF )
endif( CMAKE_HOST_SYSTEM_NAME STREQUAL "Android" )

if( NOT TARGET_INSTALL_PREFIX )
  SET(TARGET_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX} CACHE STRING  "Used to compile as installation path" )
endif( NOT TARGET_INSTALL_PREFIX )

if( __ANDROID__ )
   set( __NO_ODBC__ 1 )  # someday port unixodbc library?  But then the mysql driver needs to be ported
   set( __LINUX__ 1 )    # build as if it's linux
   DEFINE_DEFAULT( __ARM__ ON )
   set( D__ANDROID__ "-D__ANDROID__=${__ANDROID__} -DANDROID_DIR=${ANDROID_DIR} -DANDROID_NDK_VERSION=${ANDROID_NDK_VERSION}" )
   DEFINE_DEFAULT( BUILD_EXTRAS ON )
else( __ANDROID_ )
   DEFINE_DEFAULT( __ARM__ OFF )
   DEFINE_DEFAULT( BUILD_EXTRAS OFF )
endif( __ANDROID__ )

if( WIN32 OR __ANDROID__ )
DEFINE_DEFAULT( NEED_FREETYPE ON )
DEFINE_DEFAULT( NEED_JPEG ON )
DEFINE_DEFAULT( NEED_PNG ON )
DEFINE_DEFAULT( NEED_ZLIB ON )
DEFINE_DEFAULT( NEED_UUID OFF )
else( WIN32 OR __ANDROID__ )
DEFINE_DEFAULT( NEED_FREETYPE OFF )
DEFINE_DEFAULT( NEED_JPEG OFF )
DEFINE_DEFAULT( NEED_PNG OFF )
DEFINE_DEFAULT( NEED_ZLIB OFF )
set( __NO_ODBC__ 0 )  # someday port unixodbc library?  But then the mysql driver needs to be ported
set( __LINUX__ ON )
if(CMAKE_SIZEOF_VOID_P EQUAL 8)
  set( __LINUX64__ ON)
endif()
if( EXISTS /usr/include/uuid/uuid.h )
DEFINE_DEFAULT( NEED_UUID OFF )
else()
DEFINE_DEFAULT( NEED_UUID ON )
endif()
endif( WIN32 OR __ANDROID__ )

DEFINE_DEFAULT( BUILD_TESTS OFF )
DEFINE_DEFAULT( FORCE_MSVCRT  OFF )
DEFINE_DEFAULT( GENERATOR_BUILD_ALL_NOW  OFF )
DEFINE_DEFAULT( GENERATOR_BUILD_INSTALL_NOW  OFF )
DEFINE_DEFAULT( GENERATOR_BUILD_PACKAGE_NOW  OFF )
DEFINE_DEFAULT( DIRECTX_SDK "" )
DEFINE_DEFAULT( __CLR__ 0 )

IF(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
  if( CMAKE_BINARY_DIR MATCHES ${CMAKE_BUILD_TYPE}_solution\$ )
  SET(CMAKE_INSTALL_PREFIX
    ${CMAKE_BINARY_DIR}/../${CMAKE_BUILD_TYPE}_out CACHE PATH "Install default 'out' in this directory." FORCE
    )
    else()
  SET(CMAKE_INSTALL_PREFIX
    ${CMAKE_BINARY_DIR}/${CMAKE_BUILD_TYPE}_out CACHE PATH "Install default 'out' in this directory." FORCE
    )
  endif( CMAKE_BINARY_DIR MATCHES ${CMAKE_BUILD_TYPE}_solution\$ )
ENDIF(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
set( BULLET_SOURCE "${CMAKE_CURRENT_SOURCE_DIR}/../../bullet" CACHE STRING "bullet source path "  )
#OPTION( BULLET_SOURCE "bullet source path" "${CMAKE_CURRENT_SOURCE_DIR}/../../bullet/source" )
#OPTION( BUILD_MONOLITHIC "Build as one big library instead of parts" ${BUILD_MONOLITHIC} )
OPTION( BUILD_EXTRAS "Enable building extra projects (dekware, games, ... )" ${BUILD_EXTRAS} )
OPTION( BUILD_TESTS "Enable building test projects" ${BUILD_TESTS} )
OPTION( GENERATOR_BUILD_ALL_NOW "Enable building during the generate" ${GENERATOR_BUILD_ALL_NOW} )
OPTION( GENERATOR_BUILD_INSTALL_NOW "Enable building during the generate" ${GENERATOR_BUILD_INSTALL_NOW} )
OPTION( GENERATOR_BUILD_PACKAGE_NOW "Enable building installable packages (will mostly fail)" ${GENERATOR_BUILD_PACKAGE_NOW} )
OPTION( FORCE_MSVCRT "force using msvcrt instead of current version SDK libraries" ${FORCE_MSVCRT} )
#option( BUILD_UNICODE "Enable building everything as unicode" ${BUILD_UNICODE} )
option( __ANDROID__ "Enable target to android" ${__ANDROID__} )

if( DIRECTX_SDK )
# if directx had to be passed as an environment variable (has spaces)
# then it's already set, and don't have to pass it... otherwise we couldn't pass it.
  STRING( REPLACE "\\" "/" DDIRECTX_SDK -DDIRECTX_SDK=\"${DIRECTX_SDK}\" )
endif( DIRECTX_SDK )

if( BUILD_TESTS )
SET( DBUILD_TESTS -DBUILD_TESTS=${BUILD_TESTS} )
endif( BUILD_TESTS )

if( __CLR__ )
SET( D__CLR__ -D__CLR__=${__CLR__} )
endif( __CLR__ )

if( __LINUX__ )
SET( D__LINUX__ -D__LINUX__=${__LINUX__} )
endif( __LINUX__ )

if( __LINUX64__ )
SET( D__LINUX64__ -D__LINUX64__=${__LINUX64__} )
endif( __LINUX64__ )

if( __ARM__ )
SET( D__ARM__ -D__ARM__=${__ARM__} )
endif( __ARM__ )

if( FORCE_MSVCRT )
SET( DFORCE_MSVCRT -DFORCE_MSVCRT=${FORCE_MSVCRT} )
endif( FORCE_MSVCRT )


SET( SACK_REQUIREMENTS -DNEED_FREETYPE=${NEED_FREETYPE} -DNEED_JPEG=${NEED_JPEG} -DNEED_PNG=${NEED_PNG} -DNEED_ZLIB=${NEED_ZLIB} )
if( UNIX )
#message( "Not win32 (${WIN32}), UNIX(${UNIX}) but MINGW=\"${MINGW}\" maybe android? ; not passing need_externals" )
#set( SACK_REQUIREMENTS -DNEED_UUID=ON )
endif( UNIX )

IF(EXISTS ${BULLET_SOURCE}/CMakeLists.txt )
  if( WATCOM )
  else( WATCOM )
    set( BULLET_ENABLED ON )
    set( DBULLET_SOURCE -DBULLET_SOURCE=${BULLET_SOURCE} )
  endif( WATCOM )
endIF(EXISTS ${BULLET_SOURCE}/CMakeLists.txt )


set( PROJECT core )
set( EXTRA_FLAGS  -DBUILD_EXTRAS=${BUILD_EXTRAS}
			-D__NO_ODBC__=${__NO_ODBC__}
			\"-DTARGET_INSTALL_PREFIX=${TARGET_INSTALL_PREFIX}\"			
			${DDIRECTX_SDK}
        	        ${SACK_REQUIREMENTS} 
                	${DFORCE_MSVCRT} 
	                ${DBUILD_TESTS} 
                        ${DBULLET_SOURCE}
                        ${D__ARM__}
                        ${D__LINUX__}
                        ${D__LINUX64__}
                        ${D__ANDROID__}
                        ${D__CLR__}
                        ${DDX_SDK}
                )

set( PROJECT_BASE_PROJECT ${PROJECT} )
BuildProject( ${PROJECT} sack ${CMAKE_CURRENT_LIST_DIR}/.. SACK_SDK_ROOT_PATH ${EXTRA_FLAGS} )

set( EXTRA_FLAGS -DSACK_SDK_ROOT_PATH=${SACK_SDK_ROOT_PATH} )

#BuildProject( ${PROJECT}.framebuffer sack.nosolution ${CMAKE_CURRENT_LIST_DIR}/../not-exists UNUSED_SACK_SDK_ROOT_PATH ${EXTRA_FLAGS} )
#BuildProject( ${PROJECT}.puregl2 sack.nosolution ${CMAKE_CURRENT_LIST_DIR}/../not-exists UNUSED_SACK_SDK_ROOT_PATH ${EXTRA_FLAGS} )

if( NOT __ANDROID__ )
  # this calls sack_deploy to build cmakepackage
  # on android ended up making a cmake-configured-cmake-script to make this file.
#  Add_custom_command( TARGET Build${PROJECT} 
#	COMMAND ${SACK_SDK_ROOT_PATH}/${BINARY_OUTPUT_DIR}/sack_deploy${CMAKE_EXECUTABLE_SUFFIX} -nr
#	WORKING_DIRECTORY ${SACK_SDK_ROOT_PATH}
#  )                
endif( NOT __ANDROID__ )

if( NOT __CLR__ )
set( PROJECT binary )
set( EXTRA_FLAGS  -DSACK_SDK_ROOT_PATH=${SACK_SDK_ROOT_PATH} ${D__ANDROID__} )
BuildProject( ${PROJECT} sack.binaries ${CMAKE_CURRENT_LIST_DIR}/../binary SACK_BINARY_SDK_ROOT_PATH ${EXTRA_FLAGS} )
add_dependencies( ${LAST_TARGET} ${PROJECT_BASE_PROJECT} )
else( NOT __CLR__ )
message( "Disabled Binaries output for CLR build" )
endif( NOT __CLR__ )


set( PROJECT intershell )
set( EXTRA_FLAGS  -DSACK_SDK_ROOT_PATH=${SACK_SDK_ROOT_PATH} ${D__ANDROID__} )
BuildProject( ${PROJECT} ${PROJECT} ${CMAKE_CURRENT_LIST_DIR}/../src/InterShell.stable INTERSHELL_SDK_ROOT_PATH ${EXTRA_FLAGS} )
add_dependencies( ${LAST_TARGET} ${PROJECT_BASE_PROJECT} binary )

if( NOT __LINUX__ AND NOT __ANDROID__ )
  set( PROJECT intershell_Package )
  set( EXTRA_FLAGS  -DSACK_SDK_ROOT_PATH=${SACK_SDK_ROOT_PATH} ${D__ANDROID__} )
  BuildProject( ${PROJECT} Intershell.Package ${CMAKE_CURRENT_LIST_DIR}/../src/InterShell.stable/package INTERSHELL_PACKAGE_ROOT_PATH ${EXTRA_FLAGS} -DINTERSHELL_SDK_ROOT_PATH=${INTERSHELL_SDK_ROOT_PATH} )
  add_dependencies( ${LAST_TARGET} ${PROJECT_BASE_PROJECT} intershell )
endif( NOT __LINUX__ AND NOT __ANDROID__ )


#set( PROJECT intershell2 )
#set( EXTRA_FLAGS  -DSACK_SDK_ROOT_PATH=${SACK_SDK_ROOT_PATH} ${D__ANDROID__} )
#BuildProject( ${PROJECT} ${PROJECT} ${CMAKE_CURRENT_LIST_DIR}/../src/InterShell INTERSHELL2_SDK_ROOT_PATH ${EXTRA_FLAGS} )
#add_dependencies( ${LAST_TARGET} ${PROJECT_BASE_PROJECT} binary )

if( NOT __ANDROID__ )
  set( PROJECT mercurial_version_tagger )
  set( EXTRA_FLAGS  -DSACK_SDK_ROOT_PATH=${SACK_SDK_ROOT_PATH} ${D__ANDROID__} )
  BuildProject( ${PROJECT} ${PROJECT} ${CMAKE_CURRENT_LIST_DIR}/../src/utils/mercurial_version_tagger MERCURIAL_TAGGER_ROOT_PATH ${EXTRA_FLAGS} )
  add_dependencies( ${LAST_TARGET} ${PROJECT_BASE_PROJECT} )
endif( NOT __ANDROID__ )

IF( BULLET_ENABLED )
  message( "Congratz, you get Bullet projects" )
  if( NOT __ANDROID__ )
    set( PROJECT ball_mixer1 )
    set( EXTRA_FLAGS_MIXER  -DSACK_SDK_ROOT_PATH=${SACK_SDK_ROOT_PATH} -DSACK_BINARY_SDK_ROOT_PATH=${SACK_BINARY_SDK_ROOT_PATH} -DINTERSHELL_SDK_ROOT_PATH=${INTERSHELL_SDK_ROOT_PATH} ${D__ANDROID__} )
    BuildProject( ${PROJECT} ${PROJECT} ${CMAKE_CURRENT_LIST_DIR}/../src/games/ball_mixer INSTALL ${EXTRA_FLAGS_MIXER} )
    add_dependencies( ${LAST_TARGET} ${PROJECT_BASE_PROJECT} binary intershell )
  endif( NOT __ANDROID__ )

  set( PROJECT ball_mixer2 )
  set( EXTRA_FLAGS_MIXER  -DSACK_SDK_ROOT_PATH=${SACK_SDK_ROOT_PATH} -DSACK_BINARY_SDK_ROOT_PATH=${SACK_BINARY_SDK_ROOT_PATH} -DINTERSHELL_SDK_ROOT_PATH=${INTERSHELL_SDK_ROOT_PATH} ${D__ANDROID__} )
  BuildProject( ${PROJECT} ${PROJECT} ${CMAKE_CURRENT_LIST_DIR}/../src/games/ball_mixer2 INSTALL ${EXTRA_FLAGS_MIXER} )
  add_dependencies( ${LAST_TARGET} ${PROJECT_BASE_PROJECT} binary intershell )

ENDIF( BULLET_ENABLED )

if( BUILD_EXTRAS )
  include( ${CMAKE_CURRENT_LIST_DIR}/CMakeLists.extras.txt )
endif( BUILD_EXTRAS )





